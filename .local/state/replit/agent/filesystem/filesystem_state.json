{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a modern full-stack web application for an instructional designer's portfolio website. Built with React frontend and Express.js backend, it showcases projects, blog posts, testimonials, and provides a contact system. The application uses a PostgreSQL database with Drizzle ORM and features a modern UI built with shadcn/ui components and Tailwind CSS.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nDesign aesthetic: Bold, modern gradient design inspired by sanimani.com with dramatic visual impact.\nColor palette: Indigo-purple-pink-amber gradient background with white text and glassmorphism effects.\n\n# System Architecture\n\n## Frontend Architecture\n- **React SPA**: Single-page application using Vite as the build tool and development server\n- **Routing**: Wouter for client-side routing with pages for Home, About, Portfolio, Blog, and Contact\n- **State Management**: TanStack Query (React Query) for server state management and API caching\n- **UI Framework**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **Design System**: Modern gradient-based design with indigo-purple-pink-amber color palette\n- **Visual Effects**: Glassmorphism navigation, backdrop blur effects, and dramatic typography\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **TypeScript**: Full TypeScript support with path aliases for clean imports\n\n## Backend Architecture\n- **Express.js**: RESTful API server with middleware for JSON parsing and request logging\n- **File Structure**: Monorepo structure with shared schema between client and server\n- **API Routes**: CRUD operations for projects, blog posts, testimonials, and contact submissions\n- **File Uploads**: Multer integration for handling SCORM packages and media files\n- **Error Handling**: Centralized error handling middleware with proper HTTP status codes\n\n## Data Storage\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema**: Shared TypeScript schema definitions using Drizzle and Zod\n- **Tables**: Projects, blog posts, testimonials, and contact submissions with proper relationships\n- **Development**: In-memory storage fallback for development/testing environments\n- **Migrations**: Drizzle Kit for database migrations and schema management\n\n## External Dependencies\n- **Database Provider**: Neon Database (serverless PostgreSQL) via `@neondatabase/serverless`\n- **UI Components**: Radix UI primitives for accessible, unstyled components\n- **Styling**: Tailwind CSS with custom design tokens and component variants\n- **File Storage**: Local file system with multer for development (uploads directory)\n- **Fonts**: Google Fonts integration (Inter, Architects Daughter, DM Sans, Fira Code, Geist Mono)\n- **Development**: Replit-specific development tools and banner integration","size_bytes":2874},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Brand colors\n        'brand-purple': 'hsl(251, 79%, 68%)',\n        'brand-slate': {\n          DEFAULT: 'hsl(213, 25%, 12%)',\n          50: 'hsl(210, 6%, 98%)',\n          100: 'hsl(210, 6%, 95%)',\n          200: 'hsl(210, 6%, 90%)',\n          300: 'hsl(210, 6%, 83%)',\n          600: 'hsl(213, 16%, 39%)',\n          700: 'hsl(213, 25%, 27%)',\n        },\n      },\n      fontFamily: {\n        sans: [\"Poppins\", \"var(--font-sans)\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        poppins: ['Poppins', 'sans-serif'],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          \"0%\": {\n            opacity: \"0\",\n            transform: \"translateY(10px)\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"slide-in\": {\n          \"0%\": {\n            transform: \"translateX(-100%)\",\n          },\n          \"100%\": {\n            transform: \"translateX(0)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.5s ease-out\",\n        \"slide-in\": \"slide-in 0.3s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3690},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import express from \"express\";\nimport type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertProjectSchema, insertBlogPostSchema, insertTestimonialSchema, insertContactSchema, insertResumeSchema } from \"@shared/schema\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\n\n// Configure multer for file uploads\nconst uploadDir = path.join(process.cwd(), \"uploads\");\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst upload = multer({\n  dest: uploadDir,\n  limits: {\n    fileSize: 100 * 1024 * 1024, // 100MB limit for SCORM files\n  },\n  fileFilter: (req, file, cb) => {\n    // Allow common file types for portfolio content\n    const allowedTypes = [\n      'image/jpeg', 'image/png', 'image/gif', 'image/svg+xml',\n      'application/zip', 'application/x-zip-compressed', // SCORM files\n      'video/mp4', 'video/webm',\n      'application/pdf',\n      'application/msword', // .doc files\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document', // .docx files\n      'text/plain' // .txt files\n    ];\n    \n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Unsupported file type'));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Projects routes\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const category = req.query.category as string;\n      const featured = req.query.featured === \"true\";\n      \n      let projects;\n      if (featured) {\n        projects = await storage.getFeaturedProjects();\n      } else if (category) {\n        projects = await storage.getProjectsByCategory(category);\n      } else {\n        projects = await storage.getProjects();\n      }\n      \n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch project\" });\n    }\n  });\n\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const validatedData = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject(validatedData);\n      res.status(201).json(project);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid project data\" });\n    }\n  });\n\n  app.put(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const validatedData = insertProjectSchema.partial().parse(req.body);\n      const project = await storage.updateProject(req.params.id, validatedData);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid project data\" });\n    }\n  });\n\n  app.patch(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const validatedData = insertProjectSchema.partial().parse(req.body);\n      const project = await storage.updateProject(req.params.id, validatedData);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid project data\" });\n    }\n  });\n\n  app.delete(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteProject(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete project\" });\n    }\n  });\n\n  // Blog posts routes\n  app.get(\"/api/blog\", async (req, res) => {\n    try {\n      // For admin, show all posts (published and unpublished)\n      // For public blog page, filter by published=true\n      const showAll = req.query.all === \"true\";\n      const posts = showAll \n        ? await storage.getBlogPosts()\n        : await storage.getPublishedBlogPosts();\n      res.json(posts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch blog posts\" });\n    }\n  });\n\n  app.get(\"/api/blog/:id\", async (req, res) => {\n    try {\n      const post = await storage.getBlogPost(req.params.id);\n      if (!post) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n      res.json(post);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch blog post\" });\n    }\n  });\n\n  app.post(\"/api/blog\", async (req, res) => {\n    try {\n      const validatedData = insertBlogPostSchema.parse(req.body);\n      const post = await storage.createBlogPost(validatedData);\n      res.status(201).json(post);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid blog post data\" });\n    }\n  });\n\n  app.patch(\"/api/blog/:id\", async (req, res) => {\n    try {\n      const validatedData = insertBlogPostSchema.partial().parse(req.body);\n      const post = await storage.updateBlogPost(req.params.id, validatedData);\n      if (!post) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n      res.json(post);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid blog post data\" });\n    }\n  });\n\n  app.delete(\"/api/blog/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteBlogPost(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete blog post\" });\n    }\n  });\n\n  // Resume routes\n  app.get(\"/api/resumes\", async (req, res) => {\n    try {\n      const resumes = await storage.getResumes();\n      res.json(resumes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch resumes\" });\n    }\n  });\n\n  app.get(\"/api/resumes/active\", async (req, res) => {\n    try {\n      const activeResume = await storage.getActiveResume();\n      if (!activeResume) {\n        return res.status(404).json({ message: \"No active resume found\" });\n      }\n      res.json(activeResume);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch active resume\" });\n    }\n  });\n\n  app.post(\"/api/resumes\", async (req, res) => {\n    try {\n      const validatedData = insertResumeSchema.parse(req.body);\n      const resume = await storage.createResume(validatedData);\n      res.status(201).json(resume);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid resume data\" });\n    }\n  });\n\n  app.patch(\"/api/resumes/:id/activate\", async (req, res) => {\n    try {\n      const success = await storage.setActiveResume(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Resume not found\" });\n      }\n      res.json({ message: \"Resume activated successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to activate resume\" });\n    }\n  });\n\n  app.delete(\"/api/resumes/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteResume(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Resume not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete resume\" });\n    }\n  });\n\n  // Testimonials routes\n  app.get(\"/api/testimonials\", async (req, res) => {\n    try {\n      const featured = req.query.featured === \"true\";\n      const testimonials = featured \n        ? await storage.getFeaturedTestimonials()\n        : await storage.getTestimonials();\n      res.json(testimonials);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch testimonials\" });\n    }\n  });\n\n  app.post(\"/api/testimonials\", async (req, res) => {\n    try {\n      const validatedData = insertTestimonialSchema.parse(req.body);\n      const testimonial = await storage.createTestimonial(validatedData);\n      res.status(201).json(testimonial);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid testimonial data\" });\n    }\n  });\n\n  app.delete(\"/api/testimonials/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteTestimonial(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Testimonial not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete testimonial\" });\n    }\n  });\n\n  // Contact routes\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const validatedData = insertContactSchema.parse(req.body);\n      const contact = await storage.createContactSubmission(validatedData);\n      res.status(201).json({ message: \"Message sent successfully\", id: contact.id });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid contact data\" });\n    }\n  });\n\n  app.get(\"/api/contacts\", async (req, res) => {\n    try {\n      const submissions = await storage.getContactSubmissions();\n      res.json(submissions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch contact submissions\" });\n    }\n  });\n\n  // Serve static files from uploads directory\n  app.use(\"/uploads\", express.static(path.join(process.cwd(), \"uploads\")));\n\n  // File upload routes\n  app.post(\"/api/upload\", upload.single(\"file\"), (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      // Generate a URL for the uploaded file\n      const fileUrl = `/uploads/${req.file.filename}`;\n      \n      res.json({\n        url: fileUrl,\n        originalName: req.file.originalname,\n        size: req.file.size,\n        mimetype: req.file.mimetype\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Upload failed\" });\n    }\n  });\n\n  // Resume parsing endpoint\n  app.post(\"/api/parse-resume\", upload.single(\"resume\"), async (req, res) => {\n    if (!req.file) {\n      return res.status(400).json({ error: \"No resume file uploaded\" });\n    }\n\n    try {\n      // Helper functions for basic text extraction\n      const extractName = (text: string) => {\n        // Simple name extraction - look for common patterns\n        const namePatterns = [\n          /^([A-Z][a-z]+ [A-Z][a-z]+)/m,\n          /Name:\\s*([A-Z][a-z]+ [A-Z][a-z]+)/i\n        ];\n        for (const pattern of namePatterns) {\n          const match = text.match(pattern);\n          if (match) return match[1];\n        }\n        return null;\n      };\n\n      const extractEmail = (text: string) => {\n        const emailPattern = /([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/;\n        const match = text.match(emailPattern);\n        return match ? match[1] : null;\n      };\n\n      const extractPhone = (text: string) => {\n        const phonePattern = /(\\+?1?[-.\\s]?\\(?[0-9]{3}\\)?[-.\\s]?[0-9]{3}[-.\\s]?[0-9]{4})/;\n        const match = text.match(phonePattern);\n        return match ? match[1] : null;\n      };\n\n      // Basic text extraction from file content\n      let content = '';\n      const fileBuffer = req.file.buffer;\n      \n      if (req.file.mimetype === 'text/plain') {\n        content = fileBuffer.toString('utf-8');\n      } else {\n        // For PDF/DOC files, we'll extract basic text\n        // In a production app, you'd use libraries like pdf-parse, mammoth, etc.\n        content = `Please paste your resume content here. Currently supporting plain text files for parsing.`;\n      }\n\n      // Basic parsing logic\n      const parsedData = {\n        personalInfo: {\n          name: extractName(content) || \"Your Name\",\n          email: extractEmail(content) || \"your.email@example.com\", \n          phone: extractPhone(content) || \"+1 (555) 123-4567\",\n          location: \"Your City, State\",\n        },\n        summary: \"Professional summary will be extracted from your resume content...\",\n        rawContent: content,\n        filename: req.file.originalname,\n        uploadDate: new Date().toISOString()\n      };\n\n      res.json({\n        success: true,\n        data: parsedData,\n        message: \"Resume uploaded successfully. Please review and edit the information below.\"\n      });\n\n    } catch (error) {\n      console.error(\"Resume parsing error:\", error);\n      res.status(500).json({\n        error: \"Failed to parse resume\",\n        message: \"Please ensure your file is a valid resume document\"\n      });\n    }\n  });\n\n  // Serve uploaded files\n  app.use(\"/uploads\", (req, res, next) => {\n    // Add CORS headers for file access\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\"Access-Control-Allow-Methods\", \"GET\");\n    next();\n  }, express.static(uploadDir));\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13009},"server/storage.ts":{"content":"import { type Project, type InsertProject, type BlogPost, type InsertBlogPost, type Testimonial, type InsertTestimonial, type ContactSubmission, type InsertContact, type Resume, type InsertResume } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { projects, blogPosts, testimonials, contactSubmissions, resumes } from \"@shared/schema\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Projects\n  getProjects(): Promise<Project[]>;\n  getFeaturedProjects(): Promise<Project[]>;\n  getProjectsByCategory(category: string): Promise<Project[]>;\n  getProject(id: string): Promise<Project | undefined>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, project: Partial<InsertProject>): Promise<Project | undefined>;\n  deleteProject(id: string): Promise<boolean>;\n\n  // Blog Posts\n  getBlogPosts(): Promise<BlogPost[]>;\n  getPublishedBlogPosts(): Promise<BlogPost[]>;\n  getBlogPost(id: string): Promise<BlogPost | undefined>;\n  createBlogPost(post: InsertBlogPost): Promise<BlogPost>;\n  updateBlogPost(id: string, post: Partial<InsertBlogPost>): Promise<BlogPost | undefined>;\n  deleteBlogPost(id: string): Promise<boolean>;\n\n  // Testimonials\n  getTestimonials(): Promise<Testimonial[]>;\n  getFeaturedTestimonials(): Promise<Testimonial[]>;\n  createTestimonial(testimonial: InsertTestimonial): Promise<Testimonial>;\n  deleteTestimonial(id: string): Promise<boolean>;\n\n  // Contact\n  createContactSubmission(contact: InsertContact): Promise<ContactSubmission>;\n  getContactSubmissions(): Promise<ContactSubmission[]>;\n\n  // Resumes\n  getResumes(): Promise<Resume[]>;\n  getActiveResume(): Promise<Resume | undefined>;\n  createResume(resume: InsertResume): Promise<Resume>;\n  setActiveResume(id: string): Promise<boolean>;\n  deleteResume(id: string): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Projects\n  async getProjects(): Promise<Project[]> {\n    return await db.select().from(projects).orderBy(desc(projects.createdAt));\n  }\n\n  async getFeaturedProjects(): Promise<Project[]> {\n    return await db.select().from(projects).where(eq(projects.featured, true)).orderBy(desc(projects.createdAt));\n  }\n\n  async getProjectsByCategory(category: string): Promise<Project[]> {\n    return await db.select().from(projects).where(eq(projects.category, category)).orderBy(desc(projects.createdAt));\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    const [project] = await db.select().from(projects).where(eq(projects.id, id));\n    return project || undefined;\n  }\n\n  async createProject(project: InsertProject): Promise<Project> {\n    const [newProject] = await db.insert(projects).values(project).returning();\n    return newProject;\n  }\n\n  async updateProject(id: string, project: Partial<InsertProject>): Promise<Project | undefined> {\n    const [updatedProject] = await db.update(projects)\n      .set(project)\n      .where(eq(projects.id, id))\n      .returning();\n    return updatedProject || undefined;\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    const result = await db.delete(projects).where(eq(projects.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Blog Posts\n  async getBlogPosts(): Promise<BlogPost[]> {\n    return await db.select().from(blogPosts).orderBy(desc(blogPosts.createdAt));\n  }\n\n  async getPublishedBlogPosts(): Promise<BlogPost[]> {\n    return await db.select().from(blogPosts).where(eq(blogPosts.published, true)).orderBy(desc(blogPosts.createdAt));\n  }\n\n  async getBlogPost(id: string): Promise<BlogPost | undefined> {\n    const [post] = await db.select().from(blogPosts).where(eq(blogPosts.id, id));\n    return post || undefined;\n  }\n\n  async createBlogPost(post: InsertBlogPost): Promise<BlogPost> {\n    const [newPost] = await db.insert(blogPosts).values(post).returning();\n    return newPost;\n  }\n\n  async updateBlogPost(id: string, post: Partial<InsertBlogPost>): Promise<BlogPost | undefined> {\n    const [updatedPost] = await db.update(blogPosts)\n      .set({...post, updatedAt: new Date()})\n      .where(eq(blogPosts.id, id))\n      .returning();\n    return updatedPost || undefined;\n  }\n\n  async deleteBlogPost(id: string): Promise<boolean> {\n    const result = await db.delete(blogPosts).where(eq(blogPosts.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Testimonials\n  async getTestimonials(): Promise<Testimonial[]> {\n    return await db.select().from(testimonials);\n  }\n\n  async getFeaturedTestimonials(): Promise<Testimonial[]> {\n    return await db.select().from(testimonials).where(eq(testimonials.featured, true));\n  }\n\n  async createTestimonial(testimonial: InsertTestimonial): Promise<Testimonial> {\n    const [newTestimonial] = await db.insert(testimonials).values(testimonial).returning();\n    return newTestimonial;\n  }\n\n  async deleteTestimonial(id: string): Promise<boolean> {\n    const result = await db.delete(testimonials).where(eq(testimonials.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Contact\n  async createContactSubmission(contact: InsertContact): Promise<ContactSubmission> {\n    const [newSubmission] = await db.insert(contactSubmissions).values(contact).returning();\n    return newSubmission;\n  }\n\n  async getContactSubmissions(): Promise<ContactSubmission[]> {\n    return await db.select().from(contactSubmissions).orderBy(desc(contactSubmissions.createdAt));\n  }\n\n  // Resume methods\n  async getResumes(): Promise<Resume[]> {\n    return await db.select().from(resumes).orderBy(desc(resumes.uploadedAt));\n  }\n\n  async getActiveResume(): Promise<Resume | undefined> {\n    const [resume] = await db.select().from(resumes).where(eq(resumes.isActive, true));\n    return resume || undefined;\n  }\n\n  async createResume(resume: InsertResume): Promise<Resume> {\n    const [newResume] = await db.insert(resumes).values(resume).returning();\n    return newResume;\n  }\n\n  async setActiveResume(id: string): Promise<boolean> {\n    // First, set all resumes to inactive\n    await db.update(resumes).set({ isActive: false });\n    \n    // Then set the specified resume as active\n    const result = await db.update(resumes)\n      .set({ isActive: true })\n      .where(eq(resumes.id, id));\n    \n    return (result.rowCount || 0) > 0;\n  }\n\n  async deleteResume(id: string): Promise<boolean> {\n    const result = await db.delete(resumes).where(eq(resumes.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":6499},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  longDescription: text(\"long_description\"),\n  category: varchar(\"category\").notNull(), // 'elearning', 'mobile', 'corporate', 'assessment'\n  tools: json(\"tools\").$type<string[]>().default([]),\n  imageUrl: text(\"image_url\"),\n  caseStudyUrl: text(\"case_study_url\"),\n  scormUrl: text(\"scorm_url\"),\n  demoUrl: text(\"demo_url\"),\n  featured: boolean(\"featured\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const blogPosts = pgTable(\"blog_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  excerpt: text(\"excerpt\").notNull(),\n  content: text(\"content\").notNull(),\n  category: varchar(\"category\").notNull(),\n  imageUrl: text(\"image_url\"),\n  readTime: varchar(\"read_time\"),\n  published: boolean(\"published\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const testimonials = pgTable(\"testimonials\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  role: text(\"role\").notNull(),\n  company: text(\"company\").notNull(),\n  content: text(\"content\").notNull(),\n  avatarUrl: text(\"avatar_url\"),\n  rating: varchar(\"rating\").default(\"5\"),\n  featured: boolean(\"featured\").default(false),\n});\n\nexport const contactSubmissions = pgTable(\"contact_submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  company: text(\"company\"),\n  projectType: varchar(\"project_type\"),\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const resumes = pgTable(\"resumes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  filename: text(\"filename\").notNull(),\n  originalName: text(\"original_name\").notNull(),\n  fileUrl: text(\"file_url\").notNull(),\n  parsedContent: text(\"parsed_content\"),\n  isActive: boolean(\"is_active\").default(false),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBlogPostSchema = createInsertSchema(blogPosts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTestimonialSchema = createInsertSchema(testimonials).omit({\n  id: true,\n});\n\nexport const insertContactSchema = createInsertSchema(contactSubmissions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertResumeSchema = createInsertSchema(resumes).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Project = typeof projects.$inferSelect;\n\nexport type InsertBlogPost = z.infer<typeof insertBlogPostSchema>;\nexport type BlogPost = typeof blogPosts.$inferSelect;\n\nexport type InsertTestimonial = z.infer<typeof insertTestimonialSchema>;\nexport type Testimonial = typeof testimonials.$inferSelect;\n\nexport type InsertContact = z.infer<typeof insertContactSchema>;\nexport type ContactSubmission = typeof contactSubmissions.$inferSelect;\n\nexport type InsertResume = z.infer<typeof insertResumeSchema>;\nexport type Resume = typeof resumes.$inferSelect;\n","size_bytes":3676},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport About from \"@/pages/about\";\nimport Portfolio from \"@/pages/portfolio\";\nimport ProjectDetail from \"@/pages/project-detail\";\nimport Blog from \"@/pages/blog\";\nimport BlogPost from \"@/pages/blog-post\";\nimport Contact from \"@/pages/contact\";\nimport Resume from \"@/pages/resume\";\nimport Admin from \"@/pages/admin\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navigation />\n      <main className=\"flex-1\">\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/portfolio\" component={Portfolio} />\n          <Route path=\"/portfolio/:id\" component={ProjectDetail} />\n          <Route path=\"/blog\" component={Blog} />\n          <Route path=\"/blog/:id\" component={BlogPost} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/resume\" component={Resume} />\n          <Route path=\"/admin\" component={Admin} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1717},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800;900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Apply Poppins font globally */\n* {\n  font-family: 'Poppins', sans-serif;\n}\n\nbody {\n  font-family: 'Poppins', sans-serif;\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px) rotate(0deg); }\n  50% { transform: translateY(-20px) rotate(1deg); }\n}\n\n@keyframes floatSlow {\n  0%, 100% { transform: translateY(0px) translateX(0px) rotate(0deg); }\n  25% { transform: translateY(-10px) translateX(5px) rotate(0.5deg); }\n  50% { transform: translateY(-5px) translateX(-3px) rotate(-0.5deg); }\n  75% { transform: translateY(-15px) translateX(8px) rotate(0.3deg); }\n}\n\n@keyframes slideInLeft {\n  0% { transform: translateX(-100px); opacity: 0; }\n  100% { transform: translateX(0); opacity: 1; }\n}\n\n@keyframes fadeInUp {\n  0% { transform: translateY(30px); opacity: 0; }\n  100% { transform: translateY(0); opacity: 1; }\n}\n\n@keyframes expandWidth {\n  0% { width: 0; opacity: 0; }\n  100% { width: 5rem; opacity: 1; }\n}\n\n@keyframes shimmer {\n  0% { background-position: -200% 0; }\n  100% { background-position: 200% 0; }\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 0.1; transform: scale(1); }\n  50% { opacity: 0.3; transform: scale(1.1); }\n}\n\n/* Perspective utilities for 3D effects */\n.perspective-1000 {\n  perspective: 1000px;\n}\n\n.perspective-500 {\n  perspective: 500px;\n}\n\n/* Smooth background shimmer effect */\n.shimmer-bg {\n  background: linear-gradient(\n    90deg,\n    transparent 0%,\n    rgba(255, 255, 255, 0.1) 50%,\n    transparent 100%\n  );\n  background-size: 200% 100%;\n  animation: shimmer 3s ease-in-out infinite;\n}\n\n@keyframes slide-right {\n  0% { transform: translateX(-100%); }\n  100% { transform: translateX(100%); }\n}\n\n@keyframes slide-left {\n  0% { transform: translateX(100%); }\n  100% { transform: translateX(-100%); }\n}\n\n:root {\n  --background: hsl(248, 50%, 98%);\n  --foreground: hsl(213, 25%, 12%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(213, 25%, 12%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(213, 25%, 12%);\n  --primary: hsl(216, 100%, 63%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(213, 25%, 12%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 6%, 90%);\n  --muted-foreground: hsl(213, 25%, 12%);\n  --accent: hsl(211, 51%, 93%);\n  --accent-foreground: hsl(216, 100%, 63%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 6%, 82%);\n  --input: hsl(210, 6%, 97%);\n  --ring: hsl(216, 89%, 53%);\n  --chart-1: hsl(216, 100%, 63%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(213, 25%, 12%);\n  --sidebar-primary: hsl(216, 100%, 63%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211, 51%, 93%);\n  --sidebar-accent-foreground: hsl(216, 100%, 63%);\n  --sidebar-border: hsl(210, 6%, 82%);\n  --sidebar-ring: hsl(216, 89%, 53%);\n  --font-sans: 'Poppins', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 0.75rem;\n  \n  /* Brand Colors */\n  --brand-purple: hsl(251, 79%, 68%);\n  --brand-slate: hsl(213, 25%, 12%);\n  --brand-slate-50: hsl(210, 6%, 98%);\n  --brand-slate-100: hsl(210, 6%, 95%);\n  --brand-slate-200: hsl(210, 6%, 90%);\n  --brand-slate-300: hsl(210, 6%, 83%);\n  --brand-slate-600: hsl(213, 16%, 39%);\n  --brand-slate-700: hsl(213, 25%, 27%);\n}\n\n.dark {\n  --background: hsl(213, 25%, 6%);\n  --foreground: hsl(210, 6%, 91%);\n  --card: hsl(213, 19%, 10%);\n  --card-foreground: hsl(210, 6%, 85%);\n  --popover: hsl(213, 25%, 6%);\n  --popover-foreground: hsl(210, 6%, 91%);\n  --primary: hsl(216, 100%, 63%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 6%, 95%);\n  --secondary-foreground: hsl(213, 25%, 12%);\n  --muted: hsl(213, 19%, 15%);\n  --muted-foreground: hsl(210, 6%, 46%);\n  --accent: hsl(213, 19%, 15%);\n  --accent-foreground: hsl(216, 100%, 63%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(213, 19%, 15%);\n  --input: hsl(213, 19%, 18%);\n  --ring: hsl(216, 89%, 53%);\n  --sidebar: hsl(213, 19%, 10%);\n  --sidebar-foreground: hsl(210, 6%, 85%);\n  --sidebar-primary: hsl(216, 89%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(213, 19%, 15%);\n  --sidebar-accent-foreground: hsl(216, 100%, 63%);\n  --sidebar-border: hsl(213, 19%, 26%);\n  --sidebar-ring: hsl(216, 89%, 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-bold;\n  }\n}\n\n@layer utilities {\n  .brand-purple {\n    color: var(--brand-purple);\n  }\n  \n  .brand-purple {\n    color: var(--brand-purple);\n  }\n  \n  .brand-slate {\n    color: var(--brand-slate);\n  }\n\n  .bg-brand-purple {\n    background-color: var(--brand-purple);\n  }\n  \n  .bg-brand-purple {\n    background-color: var(--brand-purple);\n  }\n  \n  .bg-brand-slate {\n    background-color: var(--brand-slate);\n  }\n\n  .border-brand-purple {\n    border-color: var(--brand-purple);\n  }\n\n  .text-brand-purple {\n    color: var(--brand-purple);\n  }\n\n  .text-brand-purple {\n    color: var(--brand-purple);\n  }\n\n  .text-brand-slate {\n    color: var(--brand-slate);\n  }\n\n  .hover\\:text-brand-purple:hover {\n    color: var(--brand-purple);\n  }\n\n  .hover\\:text-brand-purple:hover {\n    color: var(--brand-purple);\n  }\n\n  .hover\\:bg-brand-purple:hover {\n    background-color: var(--brand-purple);\n  }\n\n  .hover\\:bg-brand-purple:hover {\n    background-color: var(--brand-purple);\n  }\n}\n","size_bytes":5806},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ResumeUploader.tsx":{"content":"import { useState } from \"react\";\nimport { Upload, FileText, AlertCircle, CheckCircle2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\ninterface ResumeUploaderProps {\n  onUploadComplete: (parsedData: any) => void;\n}\n\nexport function ResumeUploader({ onUploadComplete }: ResumeUploaderProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadStatus, setUploadStatus] = useState<'idle' | 'success' | 'error'>('idle');\n  const [statusMessage, setStatusMessage] = useState('');\n  const [dragOver, setDragOver] = useState(false);\n\n  const handleFileUpload = async (file: File) => {\n    if (!file) return;\n    \n    // Check file type\n    const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain'];\n    if (!allowedTypes.includes(file.type)) {\n      setUploadStatus('error');\n      setStatusMessage('Please upload a PDF, DOC, DOCX, or TXT file.');\n      return;\n    }\n\n    // Check file size (max 5MB)\n    if (file.size > 5 * 1024 * 1024) {\n      setUploadStatus('error');\n      setStatusMessage('File size must be less than 5MB.');\n      return;\n    }\n\n    setIsUploading(true);\n    setUploadStatus('idle');\n    \n    try {\n      const formData = new FormData();\n      formData.append('resume', file);\n      \n      const response = await fetch('/api/parse-resume', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to parse resume');\n      }\n\n      const parsedData = await response.json();\n      setUploadStatus('success');\n      setStatusMessage('Resume parsed successfully!');\n      onUploadComplete(parsedData);\n      \n    } catch (error) {\n      setUploadStatus('error');\n      setStatusMessage('Failed to parse resume. Please try again.');\n      console.error('Upload error:', error);\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(false);\n    const files = Array.from(e.dataTransfer.files);\n    if (files.length > 0) {\n      handleFileUpload(files[0]);\n    }\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      handleFileUpload(files[0]);\n    }\n  };\n\n  return (\n    <div className=\"w-full max-w-md mx-auto\">\n      <div\n        className={`\n          border-2 border-dashed rounded-lg p-8 text-center transition-all duration-200\n          ${dragOver ? 'border-purple-400 bg-purple-50' : 'border-gray-300 hover:border-purple-300'}\n          ${isUploading ? 'opacity-50 pointer-events-none' : ''}\n        `}\n        onDrop={handleDrop}\n        onDragOver={(e) => {\n          e.preventDefault();\n          setDragOver(true);\n        }}\n        onDragLeave={() => setDragOver(false)}\n      >\n        <div className=\"flex flex-col items-center space-y-4\">\n          {isUploading ? (\n            <>\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600\"></div>\n              <p className=\"text-gray-600\">Parsing your resume...</p>\n            </>\n          ) : (\n            <>\n              <FileText className=\"w-12 h-12 text-gray-400\" />\n              <div>\n                <p className=\"text-lg font-medium text-gray-900 mb-2\">\n                  Upload Your Resume\n                </p>\n                <p className=\"text-sm text-gray-500 mb-4\">\n                  Drop your resume here or click to browse\n                </p>\n                <input\n                  type=\"file\"\n                  id=\"resume-upload\"\n                  className=\"hidden\"\n                  accept=\".pdf,.doc,.docx,.txt\"\n                  onChange={handleFileSelect}\n                />\n                <Button\n                  asChild\n                  className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n                  disabled={isUploading}\n                >\n                  <label htmlFor=\"resume-upload\" className=\"cursor-pointer\">\n                    <Upload className=\"w-4 h-4 mr-2\" />\n                    Choose File\n                  </label>\n                </Button>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      {uploadStatus !== 'idle' && (\n        <Alert className={`mt-4 ${uploadStatus === 'success' ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'}`}>\n          {uploadStatus === 'success' ? (\n            <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n          ) : (\n            <AlertCircle className=\"h-4 w-4 text-red-600\" />\n          )}\n          <AlertDescription className={uploadStatus === 'success' ? 'text-green-800' : 'text-red-800'}>\n            {statusMessage}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      <div className=\"mt-4 text-sm text-gray-500\">\n        <p>Supported formats: PDF, DOC, DOCX, TXT</p>\n        <p>Maximum file size: 5MB</p>\n      </div>\n    </div>\n  );\n}","size_bytes":5082},"client/src/components/blog-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { BlogPost } from \"@shared/schema\";\nimport { Clock, MessageCircle, Star } from \"lucide-react\";\n\ninterface BlogCardProps {\n  post: BlogPost;\n}\n\nexport default function BlogCard({ post }: BlogCardProps) {\n  // Mock author data - in a real app this would come from the post data\n  const author = {\n    name: \"Kazeem Salau\",\n    avatar: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=32&h=32\",\n    verified: true\n  };\n\n  // Mock engagement data\n  const engagement = {\n    claps: Math.floor(Math.random() * 1000) + 100,\n    comments: Math.floor(Math.random() * 50) + 5,\n    readTime: post.readTime || `${Math.floor(Math.random() * 10) + 3} min read`\n  };\n\n  return (\n    <article className=\"group border-b border-gray-200 pb-8 last:border-b-0\" data-testid={`blog-card-${post.id}`}>\n      <div className=\"flex items-start gap-6\">\n        {/* Main Content */}\n        <div className=\"flex-1 space-y-3\">\n          {/* Author Info */}\n          <div className=\"flex items-center gap-3\">\n            <img \n              src={author.avatar}\n              alt={author.name}\n              className=\"w-6 h-6 rounded-full object-cover\"\n            />\n            <span className=\"text-sm text-gray-700 font-medium\">{author.name}</span>\n            {author.verified && (\n              <div className=\"w-4 h-4 bg-purple-500 rounded-full flex items-center justify-center\">\n                <div className=\"w-2 h-2 bg-white rounded-full\"></div>\n              </div>\n            )}\n            <span className=\"text-gray-400\">•</span>\n            <span className=\"text-sm text-gray-500\">\n              in <span className=\"font-medium text-gray-700\">{post.category || 'Design'}</span>\n            </span>\n          </div>\n\n          {/* Title */}\n          <h2 className=\"text-2xl font-bold text-gray-900 leading-tight group-hover:text-gray-700 transition-colors\">\n            <Link \n              href={`/blog/${post.id}`}\n              data-testid={`blog-title-${post.id}`}\n              className=\"hover:underline\"\n            >\n              {post.title}\n            </Link>\n          </h2>\n\n          {/* Excerpt */}\n          <p className=\"text-gray-600 text-lg leading-relaxed line-clamp-2\" data-testid={`blog-excerpt-${post.id}`}>\n            {post.excerpt}\n          </p>\n\n          {/* Metadata */}\n          <div className=\"flex items-center gap-6 pt-2\">\n            <div className=\"flex items-center gap-1 text-gray-500\">\n              <Star className=\"w-4 h-4\" />\n              <span className=\"text-sm\">{new Date(post.createdAt!).toLocaleDateString(\"en-US\", {\n                month: \"short\",\n                day: \"numeric\"\n              })}</span>\n            </div>\n            \n            <div className=\"flex items-center gap-1 text-gray-500\">\n              <Clock className=\"w-4 h-4\" />\n              <span className=\"text-sm\">{engagement.readTime}</span>\n            </div>\n\n            <div className=\"flex items-center gap-1 text-gray-500\">\n              <MessageCircle className=\"w-4 h-4\" />\n              <span className=\"text-sm\">{engagement.comments}</span>\n            </div>\n\n            <div className=\"flex items-center gap-6 ml-auto\">\n              <button className=\"text-gray-400 hover:text-gray-600 transition-colors\">\n                <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\" fill=\"none\">\n                  <path d=\"M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\" stroke=\"currentColor\" strokeWidth=\"2\"/>\n                </svg>\n              </button>\n              \n              <button className=\"text-gray-400 hover:text-gray-600 transition-colors\">\n                <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\" fill=\"none\">\n                  <circle cx=\"12\" cy=\"12\" r=\"1\" fill=\"currentColor\"/>\n                  <circle cx=\"19\" cy=\"12\" r=\"1\" fill=\"currentColor\"/>\n                  <circle cx=\"5\" cy=\"12\" r=\"1\" fill=\"currentColor\"/>\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Optional Image */}\n        {post.imageUrl && (\n          <div className=\"flex-shrink-0\">\n            <img \n              src={post.imageUrl} \n              alt={post.title}\n              className=\"w-40 h-32 object-cover rounded-lg\"\n              data-testid={`blog-image-${post.id}`}\n            />\n          </div>\n        )}\n      </div>\n    </article>\n  );\n}\n","size_bytes":4548},"client/src/components/featured-projects.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ArrowRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport ProjectCard from \"./project-card\";\nimport { Project } from \"@shared/schema\";\n\nconst categories = [\n  { id: \"all\", label: \"All Projects\" },\n  { id: \"elearning\", label: \"eLearning\" },\n  { id: \"mobile\", label: \"Mobile Learning\" },\n  { id: \"corporate\", label: \"Corporate Training\" },\n  { id: \"assessment\", label: \"Assessment\" },\n];\n\nexport default function FeaturedProjects() {\n  const [activeFilter, setActiveFilter] = useState(\"all\");\n\n  const { data: projects = [], isLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const filteredProjects = projects.filter((project: Project) => \n    activeFilter === \"all\" || project.category === activeFilter\n  );\n\n  if (isLoading) {\n    return (\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-brand-slate mb-4\">Featured Work</h2>\n          </div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"bg-gray-200 h-48 rounded-2xl mb-4\"></div>\n                <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"portfolio\" className=\"py-20 bg-white\">\n      <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl lg:text-4xl font-bold text-brand-slate mb-4\">Featured Work</h2>\n          <p className=\"text-lg text-slate-600 max-w-2xl mx-auto\">\n            A selection of projects showcasing instructional design solutions across various industries and learning contexts.\n          </p>\n        </div>\n        \n        {/* Project Filter */}\n        <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n          {categories.map((category) => (\n            <Button\n              key={category.id}\n              variant={activeFilter === category.id ? \"default\" : \"outline\"}\n              onClick={() => setActiveFilter(category.id)}\n              className={\n                activeFilter === category.id\n                  ? \"bg-brand-purple hover:bg-purple-600 text-white\"\n                  : \"bg-slate-200 text-slate-700 hover:bg-slate-300\"\n              }\n              data-testid={`filter-${category.id}`}\n            >\n              {category.label}\n            </Button>\n          ))}\n        </div>\n        \n        {/* Projects Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {filteredProjects.map((project: Project) => (\n            <ProjectCard key={project.id} project={project} />\n          ))}\n        </div>\n        \n        <div className=\"text-center mt-12\">\n          <Link href=\"/portfolio\">\n            <Button \n              size=\"lg\"\n              className=\"bg-brand-purple hover:bg-purple-600 text-white\"\n              data-testid=\"view-all-projects\"\n            >\n              View All Projects\n              <ArrowRight className=\"ml-2 h-5 w-5\" />\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3558},"client/src/components/file-upload.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Upload, File, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface FileUploadProps {\n  onFileUploaded: (url: string) => void;\n  accept?: string;\n  maxSize?: number;\n  label?: string;\n}\n\nexport default function FileUpload({ \n  onFileUploaded, \n  accept = \"image/*,.zip,.pdf,.mp4,.webm\",\n  maxSize = 100 * 1024 * 1024, // 100MB\n  label = \"Upload File\"\n}: FileUploadProps) {\n  const [uploading, setUploading] = useState(false);\n  const [uploadedFile, setUploadedFile] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const onDrop = useCallback(async (acceptedFiles: File[]) => {\n    const file = acceptedFiles[0];\n    if (!file) return;\n\n    setUploading(true);\n    const formData = new FormData();\n    formData.append(\"file\", file);\n\n    try {\n      const response = await fetch(\"/api/upload\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) throw new Error(\"Upload failed\");\n\n      const result = await response.json();\n      setUploadedFile(result.originalName);\n      onFileUploaded(result.url);\n      \n      toast({\n        title: \"Upload successful\",\n        description: `${file.name} has been uploaded.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Upload failed\", \n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  }, [onFileUploaded, toast]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: accept.split(\",\").reduce((acc, curr) => {\n      acc[curr.trim()] = [];\n      return acc;\n    }, {} as Record<string, string[]>),\n    maxSize,\n    multiple: false,\n  });\n\n  const removeFile = () => {\n    setUploadedFile(null);\n    onFileUploaded(\"\");\n  };\n\n  if (uploadedFile) {\n    return (\n      <div className=\"flex items-center justify-between p-4 border border-green-200 bg-green-50 rounded-lg\">\n        <div className=\"flex items-center space-x-2\">\n          <File className=\"h-5 w-5 text-green-600\" />\n          <span className=\"text-sm text-green-800\">{uploadedFile}</span>\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={removeFile}\n          data-testid=\"remove-file\"\n        >\n          <X className=\"h-4 w-4\" />\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      {...getRootProps()}\n      className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors\n        ${isDragActive \n          ? \"border-brand-purple bg-purple-50\" \n          : \"border-slate-300 hover:border-brand-purple hover:bg-slate-50\"\n        }\n        ${uploading ? \"opacity-50 cursor-not-allowed\" : \"\"}\n      `}\n      data-testid=\"file-upload-zone\"\n    >\n      <input {...getInputProps()} />\n      <Upload className=\"mx-auto h-12 w-12 text-slate-400 mb-4\" />\n      <p className=\"text-lg font-medium text-slate-600 mb-2\">\n        {uploading ? \"Uploading...\" : label}\n      </p>\n      <p className=\"text-sm text-slate-500\">\n        {isDragActive \n          ? \"Drop the file here...\"\n          : \"Drag & drop a file here, or click to select\"\n        }\n      </p>\n      <p className=\"text-xs text-slate-400 mt-2\">\n        Supports images, videos, PDFs, and SCORM packages (max {Math.round(maxSize / 1024 / 1024)}MB)\n      </p>\n    </div>\n  );\n}\n","size_bytes":3500},"client/src/components/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Linkedin, Twitter, Youtube } from \"lucide-react\";\n\n// Helper component for scrolling after navigation\nfunction ScrollLink({ href, children, ...props }: any) {\n  return (\n    <Link\n      href={href}\n      {...props}\n      onClick={(e) => {\n        if (props.onClick) props.onClick(e);\n        // delay scroll until after route change\n        requestAnimationFrame(() => {\n          window.scrollTo({ top: 0, behavior: \"smooth\" });\n        });\n      }}\n    >\n      {children}\n    </Link>\n  );\n}\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-brand-slate text-white py-12\">\n      <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n        <div className=\"grid md:grid-cols-3 gap-8\">\n\n          {/* Brand */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-2xl font-bold\">Kazeem Salau</h3>\n            <p className=\"text-slate-300\">\n              Creating impactful learning experiences through innovative instructional design and user-centered thinking.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a \n                href=\"https://www.linkedin.com/in/kazeem-salau-164b1087/\" \n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"w-10 h-10 bg-white/10 rounded-lg flex items-center justify-center hover:bg-white/20 transition-colors\"\n                data-testid=\"footer-linkedin\"\n              >\n                <Linkedin className=\"h-5 w-5\" />\n              </a>\n              <a \n                href=\"https://x.com/themoyoursalau?s=21\" \n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"w-10 h-10 bg-white/10 rounded-lg flex items-center justify-center hover:bg-white/20 transition-colors\"\n                data-testid=\"footer-twitter\"\n              >\n                <Twitter className=\"h-5 w-5\" />\n              </a>\n              <a \n                href=\"https://youtube.com/@moyoursalau?si=0YtNjAZVhQB1BK0R\" \n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"w-10 h-10 bg-white/10 rounded-lg flex items-center justify-center hover:bg-white/20 transition-colors\"\n                data-testid=\"footer-youtube\"\n              >\n                <Youtube className=\"h-5 w-5\" />\n              </a>\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div className=\"space-y-4\">\n            <h4 className=\"text-lg font-semibold\">Quick Links</h4>\n            <ul className=\"space-y-2 text-slate-300\">\n              <li>\n                <ScrollLink href=\"/about\" className=\"hover:text-white transition-colors\" data-testid=\"footer-about\">\n                  About\n                </ScrollLink>\n              </li>\n              <li>\n                <ScrollLink href=\"/portfolio\" className=\"hover:text-white transition-colors\" data-testid=\"footer-portfolio\">\n                  Portfolio\n                </ScrollLink>\n              </li>\n              <li>\n                <ScrollLink href=\"/blog\" className=\"hover:text-white transition-colors\" data-testid=\"footer-blog\">\n                  Blog\n                </ScrollLink>\n              </li>\n              <li>\n                <ScrollLink href=\"/contact\" className=\"hover:text-white transition-colors\" data-testid=\"footer-contact\">\n                  Contact\n                </ScrollLink>\n              </li>\n              <li>\n                <ScrollLink href=\"/resume\" className=\"hover:text-white transition-colors\" data-testid=\"footer-resume\">\n                  Resume\n                </ScrollLink>\n              </li>\n            </ul>\n          </div>\n\n          {/* Services */}\n          <div className=\"space-y-4\">\n            <h4 className=\"text-lg font-semibold\">Services</h4>\n            <ul className=\"space-y-2 text-slate-300\">\n              <li>Instructional Design</li>\n              <li>eLearning Development</li>\n              <li>Learning Strategy</li>\n              <li>UX for Learning</li>\n              <li>Content Development</li>\n            </ul>\n          </div>\n\n        </div>\n\n        <div className=\"border-t border-slate-600 mt-8 pt-8 text-center text-slate-400\">\n          <p>&copy; 2025 Kazeem Salau. All rights reserved. Built with passion for learning and design.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4384},"client/src/components/hero.tsx":{"content":"import { ArrowRight, FolderOpen, Mail } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\n\nexport default function Hero() {\n  return (\n    <section className=\"bg-gradient-to-br from-slate-50 to-purple-50 py-20 lg:py-32\">\n      <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          <div className=\"space-y-8 animate-fade-in\">\n            <div className=\"space-y-4\">\n              <h1 className=\"text-4xl lg:text-6xl font-bold text-brand-slate leading-tight\">\n                Hi, I'm <span className=\"text-brand-purple\">Kazeem</span>.\n              </h1>\n              <p className=\"text-xl lg:text-2xl text-slate-600 leading-relaxed\">\n                I specialize in creating high-impact learning solutions that drive engagement and support performance across corporate and tech environments.\n              </p>\n            </div>\n            \n            <div className=\"flex flex-wrap gap-3\">\n              <span className=\"px-4 py-2 bg-brand-purple text-white rounded-full text-sm font-medium\">\n                Instructional Design\n              </span>\n              <span className=\"px-4 py-2 bg-brand-purple text-white rounded-full text-sm font-medium\">\n                Learning Experience Design\n              </span>\n              <span className=\"px-4 py-2 bg-slate-200 text-slate-700 rounded-full text-sm font-medium\">\n                Design Thinking\n              </span>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Link href=\"/portfolio\">\n                <Button \n                  size=\"lg\" \n                  className=\"bg-brand-purple hover:bg-purple-600 text-white\"\n                  data-testid=\"view-work-button\"\n                >\n                  <FolderOpen className=\"mr-2 h-5 w-5\" />\n                  View My Work\n                </Button>\n              </Link>\n              <Link href=\"/contact\">\n                <Button \n                  variant=\"outline\" \n                  size=\"lg\"\n                  className=\"border-brand-purple text-brand-purple hover:bg-brand-purple hover:text-white\"\n                  data-testid=\"contact-button\"\n                >\n                  <Mail className=\"mr-2 h-5 w-5\" />\n                  Get In Touch\n                </Button>\n              </Link>\n            </div>\n          </div>\n          \n          <div className=\"relative\">\n            <div className=\"relative z-10\">\n              <img \n                src=\"https://images.unsplash.com/photo-1586281380349-632531db7ed4?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Modern instructional design workspace\" \n                className=\"rounded-2xl shadow-2xl w-full h-auto\"\n                data-testid=\"hero-image\"\n              />\n            </div>\n            \n            {/* Decorative elements */}\n            <div className=\"absolute -top-4 -right-4 w-72 h-72 bg-brand-purple/10 rounded-full blur-3xl\"></div>\n            <div className=\"absolute -bottom-8 -left-8 w-64 h-64 bg-brand-purple/10 rounded-full blur-3xl\"></div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3281},"client/src/components/markdown-content.tsx":{"content":"import ReactMarkdown from 'react-markdown';\n\ninterface MarkdownContentProps {\n  content: string;\n  className?: string;\n}\n\nexport default function MarkdownContent({ content, className = \"\" }: MarkdownContentProps) {\n  return (\n    <div className={`prose prose-lg max-w-none ${className}`}>\n      <ReactMarkdown\n        remarkPlugins={[]}\n        rehypePlugins={[]}\n        skipHtml={false}\n        components={{\n          // Customize heading styles\n          h1: ({ children }) => (\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-6 mt-8\">{children}</h1>\n          ),\n          h2: ({ children }) => (\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4 mt-6\">{children}</h2>\n          ),\n          h3: ({ children }) => (\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-3 mt-5\">{children}</h3>\n          ),\n          \n          // Customize paragraph styles\n          p: ({ children }) => (\n            <p className=\"text-gray-700 leading-relaxed mb-4 text-lg\">{children}</p>\n          ),\n          \n          // Customize image styles\n          img: ({ src, alt }) => (\n            <img\n              src={src}\n              alt={alt || ''}\n              className=\"w-full max-w-4xl mx-auto rounded-lg shadow-md my-8 block\"\n              loading=\"lazy\"\n              onError={(e) => {\n                const target = e.target as HTMLImageElement;\n                target.style.display = 'none';\n                console.error('Failed to load image:', src);\n              }}\n            />\n          ),\n          \n          // Customize list styles\n          ul: ({ children }) => (\n            <ul className=\"list-disc list-inside mb-4 space-y-2 text-gray-700\">{children}</ul>\n          ),\n          ol: ({ children }) => (\n            <ol className=\"list-decimal list-inside mb-4 space-y-2 text-gray-700\">{children}</ol>\n          ),\n          li: ({ children }) => (\n            <li className=\"text-lg leading-relaxed\">{children}</li>\n          ),\n          \n          // Customize blockquote styles\n          blockquote: ({ children }) => (\n            <blockquote className=\"border-l-4 border-purple-500 pl-6 my-6 italic text-gray-700 bg-gray-50 py-4 rounded-r-lg\">\n              {children}\n            </blockquote>\n          ),\n          \n          // Customize code styles\n          code: ({ children, className }) => {\n            const isInline = !className;\n            if (isInline) {\n              return (\n                <code className=\"bg-gray-100 px-2 py-1 rounded text-sm font-mono text-gray-800\">\n                  {children}\n                </code>\n              );\n            }\n            return (\n              <pre className=\"bg-gray-900 text-white p-4 rounded-lg overflow-x-auto my-4\">\n                <code className=\"text-sm\">{children}</code>\n              </pre>\n            );\n          },\n          \n          // Customize link styles\n          a: ({ href, children }) => (\n            <a\n              href={href}\n              className=\"text-purple-600 hover:text-purple-800 underline\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {children}\n            </a>\n          ),\n          \n          // Add horizontal rule styling\n          hr: () => (\n            <hr className=\"my-8 border-t border-gray-300\" />\n          ),\n        }}\n      >\n        {content}\n      </ReactMarkdown>\n    </div>\n  );\n}","size_bytes":3430},"client/src/components/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Menu, X, ExternalLink } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\n// Reusable link wrapper with scroll-to-top\nfunction ScrollLink({ href, children, onClick, ...props }: any) {\n  return (\n    <Link\n      href={href}\n      {...props}\n      onClick={(e) => {\n        if (onClick) onClick(e);\n        requestAnimationFrame(() => {\n          window.scrollTo({ top: 0, behavior: \"smooth\" });\n        });\n      }}\n    >\n      {children}\n    </Link>\n  );\n}\n\nexport default function Navigation() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [location] = useLocation();\n\n  const navigation = [\n    { name: \"Projects\", href: \"/portfolio\" },\n    { name: \"About\", href: \"/about\" },\n    { name: \"Blog\", href: \"/blog\" },\n    { name: \"Resume\", href: \"/resume\" }, // now points to internal page\n  ];\n\n  const isActive = (href: string) => {\n    if (href === \"/\") return location === \"/\";\n    return location.startsWith(href);\n  };\n\n  return (\n    <div className=\"fixed top-6 left-1/2 transform -translate-x-1/2 z-50\">\n      <nav className=\"bg-white/10 backdrop-blur-md rounded-2xl px-6 py-3 shadow-xl border border-white/20\">\n        <div className=\"flex items-center justify-between gap-6\">\n          {/* Logo */}\n          <ScrollLink href=\"/\" data-testid=\"logo-link\">\n            <div className=\"text-white font-semibold text-lg hover:text-white/80 transition-colors duration-200 whitespace-nowrap\">\n              Kazeem.\n            </div>\n          </ScrollLink>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center gap-6\">\n            {navigation.map((item) => (\n              <ScrollLink\n                key={item.name}\n                href={item.href}\n                data-testid={`nav-${item.name.toLowerCase()}`}\n                className={cn(\n                  \"text-white/80 hover:text-white transition-colors duration-200 font-medium flex items-center gap-1 whitespace-nowrap\",\n                  isActive(item.href) && \"text-white\"\n                )}\n              >\n                <span>{item.name}</span>\n                {item.external && <ExternalLink className=\"w-3 h-3\" />}\n              </ScrollLink>\n            ))}\n          </div>\n\n          {/* Contact Button */}\n          <div className=\"hidden md:block\">\n            <ScrollLink href=\"/contact\">\n              <Button \n                className=\"bg-gradient-to-r from-pink-400 via-purple-500 to-indigo-500 text-white hover:from-pink-500 hover:via-purple-600 hover:to-indigo-600 px-5 py-2 rounded-full font-medium transition-all duration-200 hover:scale-105 whitespace-nowrap\"\n                data-testid=\"contact-button\"\n              >\n                Contact\n              </Button>\n            </ScrollLink>\n          </div>\n\n          {/* Mobile menu button */}\n          <div className=\"md:hidden\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              data-testid=\"mobile-menu-toggle\"\n              className=\"text-white hover:bg-white/20 hover:text-white\"\n            >\n              {isMobileMenuOpen ? (\n                <X className=\"h-5 w-5\" />\n              ) : (\n                <Menu className=\"h-5 w-5\" />\n              )}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Navigation */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden mt-4 pt-4 border-t border-white/20\">\n            <div className=\"flex flex-col gap-4\">\n              {navigation.map((item) => (\n                <ScrollLink\n                  key={item.name}\n                  href={item.href}\n                  data-testid={`mobile-nav-${item.name.toLowerCase()}`}\n                  className={cn(\n                    \"block text-white/80 hover:text-white transition-colors duration-200 font-medium\",\n                    isActive(item.href) && \"text-white\"\n                  )}\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <span>{item.name}</span>\n                    {item.external && <ExternalLink className=\"w-3 h-3\" />}\n                  </div>\n                </ScrollLink>\n              ))}\n              <ScrollLink href=\"/contact\" onClick={() => setIsMobileMenuOpen(false)}>\n                <Button \n                  className=\"w-full bg-gradient-to-r from-pink-400 via-purple-500 to-indigo-500 text-white hover:from-pink-500 hover:via-purple-600 hover:to-indigo-600 px-6 py-2 rounded-full font-medium transition-colors duration-200 mt-2\"\n                  data-testid=\"mobile-contact-button\"\n                >\n                  Contact\n                </Button>\n              </ScrollLink>\n            </div>\n          </div>\n        )}\n      </nav>\n    </div>\n  );\n}\n","size_bytes":5001},"client/src/components/project-card.tsx":{"content":"import { ArrowRight, Monitor, Smartphone, Building2, FileText, BookOpen } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Project } from \"@shared/schema\";\n\ninterface ProjectCardProps {\n  project: Project;\n}\n\nexport default function ProjectCard({ project }: ProjectCardProps) {\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case \"elearning\":\n        return <Monitor className=\"w-12 h-12\" />;\n      case \"mobile\":\n        return <Smartphone className=\"w-12 h-12\" />;\n      case \"corporate\":\n        return <Building2 className=\"w-12 h-12\" />;\n      case \"assessment\":\n        return <FileText className=\"w-12 h-12\" />;\n      default:\n        return <BookOpen className=\"w-12 h-12\" />;\n    }\n  };\n\n  const getCategoryLabel = (category: string) => {\n    switch (category) {\n      case \"elearning\":\n        return \"E-LEARNING\";\n      case \"mobile\":\n        return \"MOBILE LEARNING\";\n      case \"corporate\":\n        return \"CORPORATE TRAINING\";\n      case \"assessment\":\n        return \"ASSESSMENT\";\n      default:\n        return \"LEARNING DESIGN\";\n    }\n  };\n\n  return (\n    <div \n      className=\"group bg-white/10 backdrop-blur-md border border-white/20 rounded-3xl shadow-lg hover:shadow-xl hover:scale-105 transition-all duration-300 overflow-hidden p-8 min-h-[400px] flex flex-col\"\n      data-testid={`project-card-${project.id}`}\n    >\n      {/* Icon Section */}\n      <div className=\"flex justify-center mb-6\">\n        <div className=\"w-24 h-24 bg-white/20 rounded-2xl flex items-center justify-center text-white\">\n          {getCategoryIcon(project.category)}\n        </div>\n      </div>\n      \n      {/* Category Label */}\n      <div className=\"text-center mb-4\">\n        <span className=\"text-white/70 text-sm font-medium tracking-wider\">\n          {getCategoryLabel(project.category)}\n        </span>\n      </div>\n      \n      {/* Title */}\n      <h3 className=\"text-2xl font-bold text-white text-center mb-4 leading-tight\" data-testid={`project-title-${project.id}`}>\n        {project.title}\n      </h3>\n      \n      {/* Description */}\n      <p className=\"text-white/80 text-center mb-6 flex-grow leading-relaxed\" data-testid={`project-description-${project.id}`}>\n        {project.description}\n      </p>\n      \n      {/* Tools */}\n      <div className=\"flex flex-wrap gap-2 justify-center mb-6\">\n        {project.tools?.slice(0, 3).map((tool, index) => (\n          <Badge \n            key={index} \n            className=\"bg-white/20 text-white border-white/30 text-xs hover:bg-white/30\"\n            data-testid={`project-tool-${project.id}-${index}`}\n          >\n            {tool}\n          </Badge>\n        ))}\n        {project.tools && project.tools.length > 3 && (\n          <Badge className=\"bg-white/20 text-white border-white/30 text-xs\">\n            +{project.tools.length - 3} more\n          </Badge>\n        )}\n      </div>\n      \n      {/* Action Button */}\n      <div className=\"text-center\">\n        <Link href={`/projects/${project.id}`}>\n          <button \n            className=\"inline-flex items-center px-6 py-3 bg-white text-indigo-900 hover:bg-white/90 font-semibold rounded-xl transition-all duration-300 hover:scale-105\"\n            data-testid={`project-link-${project.id}`}\n          >\n            View Case Study \n            <ArrowRight className=\"ml-2 h-4 w-4\" />\n          </button>\n        </Link>\n      </div>\n    </div>\n  );\n}","size_bytes":3460},"client/src/components/skills-section.tsx":{"content":"import { Brain, Code, PaintbrushVertical, TrendingUp } from \"lucide-react\";\n\nconst skills = [\n  {\n    icon: Brain,\n    title: \"Design Methodologies\",\n    items: [\"ADDIE Model\", \"SAM (Successive Approximation)\", \"Design Thinking\", \"Agile Learning Design\"],\n    color: \"purple\"\n  },\n  {\n    icon: Code,\n    title: \"Development Tools\", \n    items: [\"Articulate Storyline 360\", \"Articulate Rise\", \"Adobe Creative Suite\", \"Vyond & Video Production\"],\n    color: \"purple\"\n  },\n  {\n    icon: PaintbrushVertical,\n    title: \"UX & Design\",\n    items: [\"User Experience Design\", \"Visual Design\", \"Prototyping\", \"Accessibility Standards\"],\n    color: \"amber\"\n  },\n  {\n    icon: TrendingUp,\n    title: \"Technology & Analytics\",\n    items: [\"xAPI & SCORM\", \"Learning Analytics\", \"LMS Integration\", \"Mobile Learning\"],\n    color: \"orange\"\n  }\n];\n\nconst colorClasses = {\n  purple: \"bg-purple-100 text-brand-purple\",\n  amber: \"bg-amber-100 text-amber-600\",\n  orange: \"bg-orange-100 text-orange-600\"\n};\n\nexport default function SkillsSection() {\n  return (\n    <section className=\"py-20 bg-white\">\n      <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl lg:text-4xl font-bold text-brand-slate mb-4\">Skills & Methodologies</h2>\n          <p className=\"text-lg text-slate-600 max-w-2xl mx-auto\">\n            Leveraging proven instructional design frameworks and cutting-edge technologies to create effective learning experiences.\n          </p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {skills.map((skill, index) => {\n            const Icon = skill.icon;\n            return (\n              <div key={index} className=\"text-center space-y-4\" data-testid={`skill-${index}`}>\n                <div className={`w-16 h-16 rounded-2xl flex items-center justify-center mx-auto ${colorClasses[skill.color as keyof typeof colorClasses]}`}>\n                  <Icon className=\"h-8 w-8\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-brand-slate\" data-testid={`skill-title-${index}`}>\n                  {skill.title}\n                </h3>\n                <ul className=\"space-y-2 text-slate-600\">\n                  {skill.items.map((item, itemIndex) => (\n                    <li key={itemIndex} data-testid={`skill-item-${index}-${itemIndex}`}>\n                      {item}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2582},"client/src/components/testimonials.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Star } from \"lucide-react\";\nimport { Testimonial } from \"@shared/schema\";\n\nexport default function Testimonials() {\n  const { data: testimonials = [], isLoading } = useQuery({\n    queryKey: [\"/api/testimonials\"],\n    queryFn: () => fetch(\"/api/testimonials?featured=true\").then(res => res.json()),\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"py-20 bg-slate-50\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-brand-slate mb-4\">What Clients Say</h2>\n          </div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"bg-white rounded-2xl p-6 shadow-lg animate-pulse\">\n                <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                <div className=\"h-20 bg-gray-200 rounded mb-6\"></div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-gray-200 rounded-full mr-4\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-3/4\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-20 bg-slate-50\">\n      <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl lg:text-4xl font-bold text-brand-slate mb-4\">What Clients Say</h2>\n          <p className=\"text-lg text-slate-600\">Feedback from partners and colleagues on recent projects.</p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {testimonials.map((testimonial: Testimonial) => (\n            <div \n              key={testimonial.id} \n              className=\"bg-white rounded-2xl p-6 shadow-lg\"\n              data-testid={`testimonial-${testimonial.id}`}\n            >\n              <div className=\"flex items-center mb-4\">\n                <div className=\"flex text-yellow-400\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className=\"h-5 w-5 fill-current\" />\n                  ))}\n                </div>\n              </div>\n              <p className=\"text-slate-600 mb-6 italic\" data-testid={`testimonial-content-${testimonial.id}`}>\n                \"{testimonial.content}\"\n              </p>\n              <div className=\"flex items-center\">\n                <img \n                  src={testimonial.avatarUrl || \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\"} \n                  alt={`${testimonial.name} avatar`}\n                  className=\"w-12 h-12 rounded-full object-cover mr-4\"\n                  data-testid={`testimonial-avatar-${testimonial.id}`}\n                />\n                <div>\n                  <p className=\"font-semibold text-brand-slate\" data-testid={`testimonial-name-${testimonial.id}`}>\n                    {testimonial.name}\n                  </p>\n                  <p className=\"text-sm text-slate-500\" data-testid={`testimonial-role-${testimonial.id}`}>\n                    {testimonial.role}, {testimonial.company}\n                  </p>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3612},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/image-helpers.ts":{"content":"// Helper functions for handling image imports\n// This makes it easy to switch between your uploaded images and fallbacks\n\n// Import your uploaded images here\n// Example:\n// import heroImage from \"@assets/hero-image.jpg\";\n// import aboutPortrait from \"@assets/about-portrait.jpg\";\n// import project1 from \"@assets/project-1.jpg\";\n\n// Fallback to current images if your images aren't uploaded yet\nconst fallbackImages = {\n  hero: \"https://images.unsplash.com/photo-1586281380349-632531db7ed4?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\",\n  aboutPortrait: \"https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600\",\n  project1: \"https://images.unsplash.com/photo-1551650975-87deedd944c3?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n  project2: \"https://images.unsplash.com/photo-1576091160399-112ba8d25d1f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n  project3: \"https://images.unsplash.com/photo-1556761175-4b46a572b786?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n  project4: \"https://images.unsplash.com/photo-1485827404703-89b55fcc595e?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n  project5: \"https://images.unsplash.com/photo-1593508512255-86ab42a8e620?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n  project6: \"https://images.unsplash.com/photo-1441986300917-64674bd600d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n};\n\n// Export function to get image (your upload or fallback)\nexport const getImage = (imageKey: keyof typeof fallbackImages) => {\n  // When you upload images, uncomment and modify these lines:\n  // switch(imageKey) {\n  //   case 'hero': return heroImage;\n  //   case 'aboutPortrait': return aboutPortrait;\n  //   case 'project1': return project1;\n  //   // ... add more cases for your uploaded images\n  //   default: return fallbackImages[imageKey];\n  // }\n  \n  // For now, return fallbacks\n  return fallbackImages[imageKey];\n};","size_bytes":1986},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import { Brain, Heart, Sparkles, ArrowRight, Play, Star, Circle } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport aboutMeImage from \"../assets/about-me.png\";\n\nexport default function About() {\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [activeSection, setActiveSection] = useState(0);\n\n  useEffect(() => {\n    setIsLoaded(true);\n    \n    const handleMouseMove = (e: MouseEvent) => {\n      setMousePosition({ x: e.clientX, y: e.clientY });\n    };\n    \n    const handleScroll = () => {\n      const scrollPosition = window.scrollY;\n      const windowHeight = window.innerHeight;\n      const newActiveSection = Math.floor(scrollPosition / windowHeight);\n      setActiveSection(newActiveSection);\n    };\n\n    window.addEventListener('mousemove', handleMouseMove);\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  const beliefs = [\n    {\n      title: \"Learning is Transformation\",\n      description: \"Not information transfer, but profound change in how people think, feel, and act.\",\n      emotion: \"Wonder\",\n      icon: Brain,\n      color: \"from-purple-400 via-pink-400 to-rose-400\"\n    },\n    {\n      title: \"Empathy Drives Design\", \n      description: \"Every learner carries hopes, fears, and dreams. Great design honors their humanity.\",\n      emotion: \"Connection\",\n      icon: Heart,\n      color: \"from-purple-400 via-indigo-400 to-pink-400\"\n    },\n    {\n      title: \"Stories Shape Reality\",\n      description: \"The most powerful learning happens when we weave knowledge into narratives that resonate.\",\n      emotion: \"Inspiration\",\n      icon: Sparkles,\n      color: \"from-amber-400 via-orange-400 to-pink-400\"\n    }\n  ];\n\n  const learnerTypes = [\n    { type: \"The Skeptical Executive\", challenge: \"Prove value in 30 seconds\", approach: \"Data-driven storytelling\" },\n    { type: \"The Overwhelmed Employee\", challenge: \"No time for training\", approach: \"Micro-moments of brilliance\" },\n    { type: \"The Curious Creator\", challenge: \"Wants depth and exploration\", approach: \"Interactive discovery paths\" },\n    { type: \"The Practical Implementer\", challenge: \"Just tell me what to do\", approach: \"Clear, actionable frameworks\" }\n  ];\n\n  return (\n    <div className=\"bg-gradient-to-br from-indigo-900 via-purple-600 via-pink-500 to-amber-400 min-h-screen overflow-x-hidden\">\n      \n      {/* Interactive Cursor Effect */}\n      <div \n        className=\"fixed w-6 h-6 bg-white/30 rounded-full pointer-events-none z-50 mix-blend-difference\"\n        style={{\n          left: mousePosition.x - 12,\n          top: mousePosition.y - 12,\n          transition: 'all 0.1s ease-out'\n        }}\n      />\n\n      {/* Hero Section - Emotional Introduction */}\n      <section className=\"relative min-h-screen flex items-center pt-20 overflow-hidden\">\n        {/* Animated Background Elements */}\n        <div className=\"absolute inset-0\">\n          {[...Array(20)].map((_, i) => (\n            <div\n              key={i}\n              className=\"absolute w-2 h-2 bg-white/20 rounded-full animate-pulse\"\n              style={{\n                left: `${Math.random() * 100}%`,\n                top: `${Math.random() * 100}%`,\n                animationDelay: `${Math.random() * 3}s`,\n                animationDuration: `${2 + Math.random() * 2}s`\n              }}\n            />\n          ))}\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8 w-full relative z-10\">\n          <div className=\"grid lg:grid-cols-2 gap-16 items-center\">\n            \n            {/* Content Side */}\n            <div className=\"space-y-12\">\n              <div \n                className=\"space-y-8\"\n                style={{\n                  transform: isLoaded ? 'translateY(0) rotateX(0deg)' : 'translateY(50px) rotateX(10deg)',\n                  opacity: isLoaded ? 1 : 0,\n                  transition: 'all 1.2s cubic-bezier(0.16, 1, 0.3, 1) 0.3s'\n                }}\n              >\n                <div className=\"relative\">\n                  <h1 className=\"text-7xl lg:text-9xl font-black text-white leading-[0.8] tracking-tighter\">\n                    I DESIGN\n                    <br />\n                    <span className=\"relative\">\n                      MOMENTS\n                      <div className=\"absolute -bottom-4 left-0 w-full h-1 bg-gradient-to-r from-pink-400 to-amber-400 rounded-full\" />\n                    </span>\n                    <br />\n                    <span className=\"text-white/40\">OF CLARITY</span>\n                  </h1>\n                </div>\n                \n                <div className=\"max-w-lg space-y-6\">\n                  <p className=\"text-2xl text-white/90 leading-relaxed font-light\">\n                     \n                    Because learning should <span className=\"underline decoration-pink-400\"> spark action.</span> I turn complexity into simplicity, so learners not only understand but apply, grow, and succeed. <span className=\"italic\"></span>\n                         </p>\n                  \n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm\">\n                      <Play className=\"w-5 h-5 text-white ml-1\" />\n                    </div>\n                    <div>\n                      <p className=\"text-white font-medium\">That's what I create.</p>\n                      <p className=\"text-white/70 text-sm\">Learning experiences that transform lives.</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Image Side with Creative Frame */}\n            <div className=\"relative\">\n              <div \n                className=\"relative\"\n                style={{\n                  transform: isLoaded ? 'translateY(0) scale(1) rotateY(0deg)' : 'translateY(30px) scale(0.95) rotateY(-10deg)',\n                  opacity: isLoaded ? 1 : 0,\n                  transition: 'all 1.5s cubic-bezier(0.16, 1, 0.3, 1) 0.6s'\n                }}\n              >\n                {/* Creative Frame */}\n                <div className=\"relative\">\n                  <div className=\"absolute -inset-4 bg-gradient-to-r from-pink-400 via-purple-400 to-indigo-400 rounded-3xl blur-xl opacity-30\" />\n                  <div className=\"relative bg-white/10 backdrop-blur-sm rounded-3xl p-4 border border-white/20\">\n                    <img \n                      src={aboutMeImage}\n                      alt=\"Kazeem Salau\"\n                      className=\"w-full h-auto rounded-2xl\"\n                      data-testid=\"about-portrait\"\n                    />\n                    <div className=\"absolute top-8 right-8 bg-gradient-to-r from-amber-400 to-orange-400 rounded-full p-3\">\n                      <Star className=\"w-6 h-6 text-white\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Core Beliefs - Emotional Journey */}\n      <section className=\"py-32 relative\">\n        <div className=\"max-w-6xl mx-auto px-6 lg:px-8\">\n          <div className=\"text-center mb-20\">\n            <h2 className=\"text-6xl lg:text-7xl font-black text-white mb-8 leading-tight\">\n              WHAT I\n              <br />\n              <span className=\"bg-gradient-to-r from-white to-white/60 bg-clip-text text-transparent\">\n                BELIEVE\n              </span>\n            </h2>\n            <p className=\"text-2xl text-white/80 max-w-3xl mx-auto leading-relaxed\">\n              Design for learning is more than beautiful slides or sleek interfaces. It’s about shaping experiences that connect with people, spark curiosity, and turn knowledge into real-world skills that stick.\n            </p>\n          </div>\n          \n          <div className=\"space-y-20\">\n            {beliefs.map((belief, index) => (\n              <div \n                key={index}\n                className=\"group relative\"\n                style={{\n                  transform: `translateX(${index % 2 === 0 ? '-20px' : '20px'})`,\n                  opacity: 0,\n                  animation: `slideIn 1s ease-out ${0.5 + index * 0.3}s forwards`\n                }}\n              >\n                <div className=\"grid lg:grid-cols-12 gap-12 items-center\">\n                  {index % 2 === 0 ? (\n                    <>\n                      <div className=\"lg:col-span-8 space-y-6\">\n                        <div className=\"space-y-4\">\n                          <div className={`inline-block px-6 py-2 bg-gradient-to-r ${belief.color} rounded-full text-white font-bold text-sm uppercase tracking-wide`}>\n                            {belief.emotion}\n                          </div>\n                          <h3 className=\"text-4xl lg:text-5xl font-black text-white leading-tight\">\n                            {belief.title}\n                          </h3>\n                          <p className=\"text-xl text-white/80 leading-relaxed max-w-2xl\">\n                            {belief.description}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"lg:col-span-4 flex justify-center\">\n                        <div className={`w-32 h-32 bg-gradient-to-r ${belief.color} rounded-3xl flex items-center justify-center group-hover:scale-110 group-hover:rotate-12 transition-all duration-500`}>\n                          <belief.icon className=\"w-16 h-16 text-white\" />\n                        </div>\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <div className=\"lg:col-span-4 flex justify-center order-2 lg:order-1\">\n                        <div className={`w-32 h-32 bg-gradient-to-r ${belief.color} rounded-3xl flex items-center justify-center group-hover:scale-110 group-hover:rotate-12 transition-all duration-500`}>\n                          <belief.icon className=\"w-16 h-16 text-white\" />\n                        </div>\n                      </div>\n                      <div className=\"lg:col-span-8 space-y-6 order-1 lg:order-2\">\n                        <div className=\"space-y-4 text-right\">\n                          <div className={`inline-block px-6 py-2 bg-gradient-to-r ${belief.color} rounded-full text-white font-bold text-sm uppercase tracking-wide`}>\n                            {belief.emotion}\n                          </div>\n                          <h3 className=\"text-4xl lg:text-5xl font-black text-white leading-tight\">\n                            {belief.title}\n                          </h3>\n                          <p className=\"text-xl text-white/80 leading-relaxed max-w-2xl ml-auto\">\n                            {belief.description}\n                          </p>\n                        </div>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <style>{`\n          @keyframes slideIn {\n            to {\n              opacity: 1;\n              transform: translateX(0);\n            }\n          }\n        `}</style>\n      </section>\n\n      {/* The Humans I Design For */}\n      <section className=\"py-32 bg-black/30 backdrop-blur-sm\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          <div className=\"text-center mb-20\">\n            <h2 className=\"text-5xl lg:text-6xl font-black text-white mb-6\">\n              THE HUMANS\n              <br />\n              <span className=\"text-white/50\">I DESIGN FOR</span>\n            </h2>\n            <p className=\"text-xl text-white/70 max-w-3xl mx-auto\">\n              Every learner is a universe of complexity. Understanding their reality is where great design begins.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {learnerTypes.map((learner, index) => (\n              <div \n                key={index}\n                className=\"group bg-white/5 backdrop-blur-md rounded-3xl p-8 border border-white/10 hover:bg-white/10 transition-all duration-500 hover:scale-105\"\n              >\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-3 h-3 bg-gradient-to-r from-pink-400 to-purple-400 rounded-full group-hover:scale-150 transition-transform duration-300\" />\n                    <h3 className=\"text-2xl font-bold text-white\">{learner.type}</h3>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <p className=\"text-sm text-white/60 uppercase tracking-wide font-medium mb-2\">Their Challenge</p>\n                      <p className=\"text-lg text-white/90 italic\">\"{learner.challenge}\"</p>\n                    </div>\n                    \n                    <div>\n                      <p className=\"text-sm text-white/60 uppercase tracking-wide font-medium mb-2\">My Approach</p>\n                      <p className=\"text-lg text-white font-medium\">{learner.approach}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Call to Action - Emotional */}\n      <section className=\"py-32 relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/20 via-purple-500/20 to-indigo-500/20\" />\n        \n        <div className=\"max-w-4xl mx-auto px-6 lg:px-8 text-center relative z-10\">\n          <div className=\"space-y-12\">\n            <div className=\"space-y-8\">\n              <h2 className=\"text-6xl lg:text-7xl font-black text-white leading-tight\">\n                READY TO\n                <br />\n                <span className=\"bg-gradient-to-r from-pink-400 via-purple-400 to-indigo-400 bg-clip-text text-transparent\">\n                  TRANSFORM\n                </span>\n                <br />\n                LEARNING?\n              </h2>\n              \n              <p className=\"text-2xl text-white/90 leading-relaxed max-w-2xl mx-auto\">\n                Let's create learning experiences that don't just inform—they \n                <span className=\"font-bold\"> inspire</span>, \n                <span className=\"italic\"> engage</span>, and \n                <span className=\"underline decoration-pink-400\"> transform</span>.\n              </p>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-6 justify-center\">\n              <a \n                href=\"/contact\"\n                className=\"group bg-gradient-to-r from-pink-400 via-purple-500 to-indigo-500 text-white px-12 py-6 rounded-full font-bold text-lg hover:from-pink-500 hover:via-purple-600 hover:to-indigo-600 transition-all duration-300 flex items-center justify-center gap-3 hover:scale-105\"\n              >\n                Let's Create Magic\n                <ArrowRight className=\"w-5 h-5 group-hover:translate-x-2 transition-transform\" />\n              </a>\n              <a \n                href=\"/portfolio\"\n                className=\"bg-white/10 text-white px-12 py-6 rounded-full font-bold text-lg border-2 border-white/30 hover:bg-white/20 hover:border-white/50 transition-all duration-300 hover:scale-105\"\n              >\n                See the Impact\n              </a>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":15732},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Project, BlogPost, Testimonial, ContactSubmission, Resume, type InsertProject, type InsertBlogPost, type InsertTestimonial, type InsertResume } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Trash2, Edit, Plus, Save, X, FileText, Users, Mail, FolderOpen, Eye, EyeOff, ImageIcon, Type, List, Quote } from \"lucide-react\";\nimport MarkdownContent from \"@/components/markdown-content\";\n\n\nexport default function Admin() {\n  const [activeTab, setActiveTab] = useState(\"projects\");\n  const [editingProject, setEditingProject] = useState<Project | null>(null);\n  const [editingBlogPost, setEditingBlogPost] = useState<BlogPost | null>(null);\n  const [resumeText, setResumeText] = useState(\"\");\n  const [editingTestimonial, setEditingTestimonial] = useState<Testimonial | null>(null);\n  const [showForm, setShowForm] = useState(false);\n  const [showPreview, setShowPreview] = useState(false);\n  const [formData, setFormData] = useState<InsertProject>({\n    title: \"\",\n    description: \"\",\n    category: \"elearning\",\n    tools: [],\n    imageUrl: \"\",\n    caseStudyUrl: \"\",\n    scormUrl: \"\",\n    demoUrl: \"\",\n    featured: false,\n  });\n  const [blogFormData, setBlogFormData] = useState<InsertBlogPost>({\n    title: \"\",\n    excerpt: \"\",\n    content: \"\",\n    category: \"instructional-design\",\n    imageUrl: \"\",\n    readTime: \"\",\n    published: false,\n  });\n  const [testimonialFormData, setTestimonialFormData] = useState<InsertTestimonial>({\n    name: \"\",\n    role: \"\",\n    company: \"\",\n    content: \"\",\n    avatarUrl: \"\",\n    rating: \"5\",\n    featured: false,\n  });\n\n  const [resumeFormData, setResumeFormData] = useState<InsertResume>({\n    filename: \"\",\n    originalName: \"\",\n    fileUrl: \"\",\n    parsedContent: \"\",\n    isActive: false,\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: projects = [], isLoading: projectsLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  \n  const { data: blogPosts = [], isLoading: blogLoading } = useQuery<BlogPost[]>({\n    queryKey: [\"/api/blog?all=true\"],\n    staleTime: 0,\n    refetchOnWindowFocus: true,\n  });\n  \n  const { data: testimonials = [], isLoading: testimonialsLoading } = useQuery<Testimonial[]>({\n    queryKey: [\"/api/testimonials\"],\n  });\n  \n  const { data: contacts = [], isLoading: contactsLoading } = useQuery<ContactSubmission[]>({\n    queryKey: [\"/api/contacts\"],\n  });\n\n  const { data: resumes = [], isLoading: resumesLoading } = useQuery<Resume[]>({\n    queryKey: [\"/api/resumes\"],\n  });\n\n  const createProjectMutation = useMutation({\n    mutationFn: async (data: InsertProject) => {\n      return await apiRequest(\"POST\", \"/api/projects\", data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Project created successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      resetProjectForm();\n    },\n    onError: (error) => {\n      toast({ title: \"Error creating project\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const updateProjectMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertProject> }) => {\n      return await apiRequest(\"PATCH\", `/api/projects/${id}`, data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Project updated successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      resetProjectForm();\n    },\n    onError: (error) => {\n      toast({ title: \"Error updating project\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteProjectMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/projects/${id}`);\n    },\n    onSuccess: () => {\n      toast({ title: \"Project deleted successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n    },\n    onError: (error) => {\n      toast({ title: \"Error deleting project\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const createBlogMutation = useMutation({\n    mutationFn: async (data: InsertBlogPost) => {\n      return await apiRequest(\"POST\", \"/api/blog\", data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Blog post created successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/blog?all=true\"] });\n      resetBlogForm();\n    },\n    onError: (error) => {\n      toast({ title: \"Error creating blog post\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const updateBlogMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertBlogPost> }) => {\n      return await apiRequest(\"PATCH\", `/api/blog/${id}`, data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Blog post updated successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/blog?all=true\"] });\n      resetBlogForm();\n    },\n    onError: (error) => {\n      toast({ title: \"Error updating blog post\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteBlogMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/blog/${id}`);\n    },\n    onSuccess: () => {\n      toast({ title: \"Blog post deleted successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/blog?all=true\"] });\n    },\n    onError: (error) => {\n      toast({ title: \"Error deleting blog post\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const createTestimonialMutation = useMutation({\n    mutationFn: async (data: InsertTestimonial) => {\n      return await apiRequest(\"POST\", \"/api/testimonials\", data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Testimonial created successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/testimonials\"] });\n      resetTestimonialForm();\n    },\n    onError: (error) => {\n      toast({ title: \"Error creating testimonial\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteTestimonialMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/testimonials/${id}`);\n    },\n    onSuccess: () => {\n      toast({ title: \"Testimonial deleted successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/testimonials\"] });\n    },\n    onError: (error) => {\n      toast({ title: \"Error deleting testimonial\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const handleProjectSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingProject) {\n      updateProjectMutation.mutate({ id: editingProject.id, data: formData });\n    } else {\n      createProjectMutation.mutate(formData);\n    }\n  };\n\n  const handleBlogSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingBlogPost) {\n      updateBlogMutation.mutate({ id: editingBlogPost.id, data: blogFormData });\n    } else {\n      createBlogMutation.mutate(blogFormData);\n    }\n  };\n\n  const handleTestimonialSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createTestimonialMutation.mutate(testimonialFormData);\n  };\n\n  const resetProjectForm = () => {\n    setEditingProject(null);\n    setShowForm(false);\n    setFormData({\n      title: \"\",\n      description: \"\",\n      category: \"elearning\",\n      tools: [],\n      imageUrl: \"\",\n      caseStudyUrl: \"\",\n      scormUrl: \"\",\n      demoUrl: \"\",\n      featured: false,\n    });\n  };\n\n  const resetBlogForm = () => {\n    setEditingBlogPost(null);\n    setShowForm(false);\n    setBlogFormData({\n      title: \"\",\n      excerpt: \"\",\n      content: \"\",\n      category: \"instructional-design\",\n      imageUrl: \"\",\n      readTime: \"\",\n      published: false,\n    });\n  };\n\n  const resetTestimonialForm = () => {\n    setEditingTestimonial(null);\n    setShowForm(false);\n    setTestimonialFormData({\n      name: \"\",\n      role: \"\",\n      company: \"\",\n      content: \"\",\n      avatarUrl: \"\",\n      rating: \"5\",\n      featured: false,\n    });\n  };\n\n  const startProjectEdit = (project: Project) => {\n    setEditingProject(project);\n    setShowForm(true);\n    setFormData({ ...project });\n  };\n\n  const startBlogEdit = (post: BlogPost) => {\n    setEditingBlogPost(post);\n    setShowForm(true);\n    setBlogFormData({ ...post });\n  };\n\n  // Resume mutations\n  const createResumeMutation = useMutation({\n    mutationFn: async (data: InsertResume) => {\n      return await apiRequest(\"POST\", \"/api/resumes\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/resumes\"] });\n      toast({ title: \"Resume saved successfully!\" });\n      resetResumeForm();\n    },\n    onError: () => {\n      toast({ title: \"Failed to save resume\", variant: \"destructive\" });\n    },\n  });\n\n  const activateResumeMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"PATCH\", `/api/resumes/${id}/activate`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/resumes\"] });\n      toast({ title: \"Resume activated successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to activate resume\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteResumeMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/resumes/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/resumes\"] });\n      toast({ title: \"Resume deleted successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete resume\", variant: \"destructive\" });\n    },\n  });\n\n  const handleResumeUpload = async (file: File) => {\n    const formData = new FormData();\n    formData.append(\"resume\", file);\n\n    try {\n      const response = await fetch(\"/api/parse-resume\", {\n        method: \"POST\",\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Upload failed\");\n      }\n\n      const result = await response.json();\n      \n      // Create resume record\n      createResumeMutation.mutate({\n        filename: result.data.filename || file.name,\n        originalName: file.name,\n        fileUrl: result.data.fileUrl || `/uploads/${file.name}`,\n        parsedContent: result.data.rawContent || \"\",\n        isActive: false,\n      });\n\n    } catch (error) {\n      toast({ title: \"Failed to upload resume\", variant: \"destructive\" });\n    }\n  };\n\n  const resetResumeForm = () => {\n    setResumeFormData({\n      filename: \"\",\n      originalName: \"\",\n      fileUrl: \"\",\n      parsedContent: \"\",\n      isActive: false,\n    });\n  };\n\n  const isLoading = projectsLoading || blogLoading || testimonialsLoading || contactsLoading || resumesLoading;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-800 flex items-center justify-center\">\n        <div className=\"text-white text-xl\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-800\">\n      <div className=\"container mx-auto px-6 py-12\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold text-white mb-2\">Website Admin</h1>\n            <p className=\"text-white/80\">Complete content management system for your portfolio</p>\n          </div>\n\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n            <TabsList className=\"h-10 items-center justify-center rounded-md p-1 grid w-full grid-cols-5 bg-white/10 backdrop-blur-md border-white/20 text-[#ffffff]\">\n              <TabsTrigger value=\"projects\" className=\"data-[state=active]:bg-white/20\">\n                <FolderOpen className=\"w-4 h-4 mr-2\" />\n                Projects\n              </TabsTrigger>\n              <TabsTrigger value=\"blog\" className=\"data-[state=active]:bg-white/20 text-[#ffffff]\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Blog Posts\n              </TabsTrigger>\n              <TabsTrigger value=\"testimonials\" className=\"data-[state=active]:bg-white/20\">\n                <Users className=\"w-4 h-4 mr-2\" />\n                Testimonials\n              </TabsTrigger>\n              <TabsTrigger value=\"resumes\" className=\"data-[state=active]:bg-white/20\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Resumes\n              </TabsTrigger>\n              <TabsTrigger value=\"contacts\" className=\"data-[state=active]:bg-white/20\">\n                <Mail className=\"w-4 h-4 mr-2\" />\n                Contact Messages\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"projects\" className=\"space-y-6\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-2xl font-bold text-white\">Projects Management</h2>\n                <Button\n                  onClick={() => {setShowForm(true); setActiveTab(\"projects\")}}\n                  className=\"bg-gradient-to-r from-pink-500 to-violet-500 hover:from-pink-600 hover:to-violet-600\"\n                  data-testid=\"button-add-project\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Project\n                </Button>\n              </div>\n\n              {showForm && activeTab === \"projects\" && (\n                <Card className=\"mb-8 bg-white/10 backdrop-blur-md border-white/20\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white\">\n                      {editingProject ? 'Edit Project' : 'Add New Project'}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <form onSubmit={handleProjectSubmit} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <label className=\"text-white text-sm font-medium\">Title</label>\n                        <Input \n                          value={formData.title}\n                          onChange={(e) => setFormData({...formData, title: e.target.value})}\n                          className=\"bg-white/10 border-white/20 text-white placeholder:text-white/60 mt-2\"\n                          data-testid=\"input-title\"\n                        />\n                      </div>\n\n                      <div>\n                        <label className=\"text-white text-sm font-medium\">Category</label>\n                        <Select value={formData.category} onValueChange={(value) => setFormData({...formData, category: value})}>\n                          <SelectTrigger className=\"bg-white/10 border-white/20 text-white mt-2\" data-testid=\"select-category\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"elearning\">E-Learning</SelectItem>\n                            <SelectItem value=\"corporate\">Corporate</SelectItem>\n                            <SelectItem value=\"mobile\">Mobile</SelectItem>\n                            <SelectItem value=\"assessment\">Assessment</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <div>\n                      <label className=\"text-white text-sm font-medium\">Description</label>\n                      <Textarea \n                        value={formData.description}\n                        onChange={(e) => setFormData({...formData, description: e.target.value})}\n                        className=\"bg-white/10 border-white/20 text-white placeholder:text-white/60 mt-2\"\n                        rows={4}\n                        data-testid=\"textarea-description\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"text-white text-sm font-medium\">Tools (comma-separated)</label>\n                      <Input \n                        value={formData.tools?.join(', ') || ''}\n                        onChange={(e) => setFormData({...formData, tools: e.target.value.split(',').map(t => t.trim()).filter(Boolean)})}\n                        placeholder=\"Storyline 360, Adobe XD, React\"\n                        className=\"bg-white/10 border-white/20 text-white placeholder:text-white/60 mt-2\"\n                        data-testid=\"input-tools\"\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <label className=\"text-white text-sm font-medium\">Image URL</label>\n                        <Input \n                          value={formData.imageUrl || ''}\n                          onChange={(e) => setFormData({...formData, imageUrl: e.target.value})}\n                          className=\"bg-white/10 border-white/20 text-white placeholder:text-white/60 mt-2\"\n                          data-testid=\"input-image-url\"\n                        />\n                      </div>\n\n                      <div>\n                        <label className=\"text-white text-sm font-medium\">SCORM URL</label>\n                        <Input \n                          value={formData.scormUrl || ''}\n                          onChange={(e) => setFormData({...formData, scormUrl: e.target.value})}\n                          className=\"bg-white/10 border-white/20 text-white placeholder:text-white/60 mt-2\"\n                          data-testid=\"input-scorm-url\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"flex flex-row items-center justify-between rounded-lg border border-white/20 p-4\">\n                      <div className=\"space-y-0.5\">\n                        <label className=\"text-white text-sm font-medium\">Featured Project</label>\n                        <div className=\"text-sm text-white/60\">\n                          Display this project prominently on the homepage\n                        </div>\n                      </div>\n                      <input\n                        type=\"checkbox\"\n                        checked={formData.featured || false}\n                        onChange={(e) => setFormData({...formData, featured: e.target.checked})}\n                        className=\"h-4 w-4\"\n                        data-testid=\"switch-featured\"\n                      />\n                    </div>\n\n                    <div className=\"flex gap-4\">\n                      <Button\n                        type=\"submit\"\n                        disabled={createProjectMutation.isPending || updateProjectMutation.isPending}\n                        className=\"bg-gradient-to-r from-green-500 to-purple-500 hover:from-green-600 hover:to-purple-600\"\n                        data-testid=\"button-save\"\n                      >\n                        <Save className=\"w-4 h-4 mr-2\" />\n                        {editingProject ? 'Update' : 'Create'} Project\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={resetProjectForm}\n                        className=\"border-white/20 text-white hover:bg-white/10 bg-[#ff00001a]\"\n                        data-testid=\"button-cancel\"\n                      >\n                        <X className=\"w-4 h-4 mr-2\" />\n                        Cancel\n                      </Button>\n                    </div>\n                    </form>\n                  </CardContent>\n                </Card>\n              )}\n\n              <div className=\"grid gap-6\">\n                {projects.map((project) => (\n                  <Card key={project.id} className=\"bg-white/10 backdrop-blur-md border-white/20\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3 mb-2\">\n                            <h3 className=\"text-xl font-bold text-white\">{project.title}</h3>\n                            {project.featured && (\n                              <Badge className=\"bg-yellow-500/20 text-yellow-300 border-yellow-500/30\">\n                                Featured\n                              </Badge>\n                            )}\n                            <Badge variant=\"outline\" className=\"border-white/30 text-white/80\">\n                              {project.category}\n                            </Badge>\n                          </div>\n                          <p className=\"text-white/80 mb-3\">{project.description}</p>\n                          {project.tools && project.tools.length > 0 && (\n                            <div className=\"flex flex-wrap gap-2 mb-3\">\n                              {project.tools.map((tool, index) => (\n                                <Badge key={index} variant=\"secondary\" className=\"bg-white/10 text-white/90\">\n                                  {tool}\n                                </Badge>\n                              ))}\n                            </div>\n                          )}\n                          {project.scormUrl && (\n                            <Badge className=\"bg-purple-500/20 text-purple-300 border-purple-500/30\">\n                              Interactive Training Available\n                            </Badge>\n                          )}\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => startProjectEdit(project)}\n                            className=\"border-white/20 text-white hover:bg-white/10 bg-[#554491]\"\n                            data-testid={`button-edit-${project.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => deleteProjectMutation.mutate(project.id)}\n                            className=\"border-red-500/20 text-red-300 hover:bg-red-500/10 bg-[#57449100]\"\n                            data-testid={`button-delete-${project.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"blog\" className=\"space-y-6\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-2xl font-bold text-white\">Blog Posts Management</h2>\n                <Button\n                  onClick={() => {setShowForm(true); setActiveTab(\"blog\")}}\n                  className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Blog Post\n                </Button>\n              </div>\n\n              {showForm && activeTab === \"blog\" && (\n                <Card className=\"mb-8 bg-white/10 backdrop-blur-md border-white/20\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white\">\n                      {editingBlogPost ? 'Edit Blog Post' : 'Add New Blog Post'}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <form onSubmit={handleBlogSubmit} className=\"space-y-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <label className=\"text-white text-sm font-medium\">Title</label>\n                          <Input \n                            value={blogFormData.title}\n                            onChange={(e) => setBlogFormData({...blogFormData, title: e.target.value})}\n                            className=\"bg-white/10 border-white/20 text-white placeholder:text-white/60 mt-2\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-white text-sm font-medium\">Category</label>\n                          <Select value={blogFormData.category} onValueChange={(value) => setBlogFormData({...blogFormData, category: value})}>\n                            <SelectTrigger className=\"bg-white/10 border-white/20 text-white mt-2\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"instructional-design\">Instructional Design</SelectItem>\n                              <SelectItem value=\"elearning\">E-Learning</SelectItem>\n                              <SelectItem value=\"book-review\">Book Review</SelectItem>\n                              <SelectItem value=\"personal-development\">Personal Development</SelectItem>\n                              <SelectItem value=\"case-study\">Case Study</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <label className=\"text-white text-sm font-medium\">Excerpt</label>\n                        <Textarea \n                          value={blogFormData.excerpt}\n                          onChange={(e) => setBlogFormData({...blogFormData, excerpt: e.target.value})}\n                          className=\"bg-white/10 border-white/20 text-white placeholder:text-white/60 mt-2\"\n                          rows={3}\n                        />\n                      </div>\n                      \n                      <div>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <label className=\"text-white text-sm font-medium\">Content (Markdown supported)</label>\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setShowPreview(!showPreview)}\n                            className=\"border-white/20 text-white hover:bg-white/10\"\n                          >\n                            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n                            {showPreview ? 'Hide Preview' : 'Show Preview'}\n                          </Button>\n                        </div>\n\n                        {/* Formatting Toolbar */}\n                        <div className=\"bg-white/5 border border-white/10 rounded-lg p-3 mb-2\">\n                          <div className=\"flex flex-wrap gap-2 mb-2\">\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                const textarea = document.querySelector('textarea[placeholder*=\"Write your blog content\"]') as HTMLTextAreaElement;\n                                if (textarea) {\n                                  const start = textarea.selectionStart;\n                                  const end = textarea.selectionEnd;\n                                  const text = textarea.value;\n                                  const newText = text.substring(0, start) + '![Image description](https://your-image-url.com/image.jpg)\\n\\n' + text.substring(end);\n                                  setBlogFormData({...blogFormData, content: newText});\n                                }\n                              }}\n                              className=\"text-white/80 hover:bg-white/10 h-8\"\n                            >\n                              <ImageIcon className=\"w-4 h-4 mr-1\" />\n                              Image\n                            </Button>\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                const textarea = document.querySelector('textarea[placeholder*=\"Write your blog content\"]') as HTMLTextAreaElement;\n                                if (textarea) {\n                                  const start = textarea.selectionStart;\n                                  const end = textarea.selectionEnd;\n                                  const text = textarea.value;\n                                  const newText = text.substring(0, start) + '## ' + text.substring(end);\n                                  setBlogFormData({...blogFormData, content: newText});\n                                }\n                              }}\n                              className=\"text-white/80 hover:bg-white/10 h-8\"\n                            >\n                              <Type className=\"w-4 h-4 mr-1\" />\n                              Heading\n                            </Button>\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                const textarea = document.querySelector('textarea[placeholder*=\"Write your blog content\"]') as HTMLTextAreaElement;\n                                if (textarea) {\n                                  const start = textarea.selectionStart;\n                                  const end = textarea.selectionEnd;\n                                  const text = textarea.value;\n                                  const newText = text.substring(0, start) + '- List item\\n- List item\\n' + text.substring(end);\n                                  setBlogFormData({...blogFormData, content: newText});\n                                }\n                              }}\n                              className=\"text-white/80 hover:bg-white/10 h-8\"\n                            >\n                              <List className=\"w-4 h-4 mr-1\" />\n                              List\n                            </Button>\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                const textarea = document.querySelector('textarea[placeholder*=\"Write your blog content\"]') as HTMLTextAreaElement;\n                                if (textarea) {\n                                  const start = textarea.selectionStart;\n                                  const end = textarea.selectionEnd;\n                                  const text = textarea.value;\n                                  const newText = text.substring(0, start) + '> Your quote here\\n\\n' + text.substring(end);\n                                  setBlogFormData({...blogFormData, content: newText});\n                                }\n                              }}\n                              className=\"text-white/80 hover:bg-white/10 h-8\"\n                            >\n                              <Quote className=\"w-4 h-4 mr-1\" />\n                              Quote\n                            </Button>\n                          </div>\n                          <div className=\"text-xs text-white/70 space-y-1\">\n                            <p><strong>Quick reference:</strong></p>\n                            <p>**Bold** | *Italic* | [Link](url) | ![Image](url) | ## Heading | &gt; Quote</p>\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-1 gap-4\">\n                          {/* Editor */}\n                          <div className={showPreview ? \"lg:grid lg:grid-cols-2 lg:gap-4\" : \"\"}>\n                            <div>\n                              <Textarea \n                                value={blogFormData.content}\n                                onChange={(e) => setBlogFormData({...blogFormData, content: e.target.value})}\n                                className=\"bg-white/10 border-white/20 text-white placeholder:text-white/60\"\n                                placeholder=\"Write your blog content here using Markdown formatting...\"\n                                rows={showPreview ? 20 : 12}\n                              />\n                            </div>\n                            \n                            {/* Preview */}\n                            {showPreview && (\n                              <div className=\"bg-white rounded-lg p-6 max-h-96 overflow-y-auto\">\n                                <h4 className=\"text-lg font-semibold text-gray-900 mb-4\">Preview</h4>\n                                <MarkdownContent content={blogFormData.content || \"Start typing to see preview...\"} />\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <label className=\"text-white text-sm font-medium\">Image URL</label>\n                          <Input \n                            value={blogFormData.imageUrl || ''}\n                            onChange={(e) => setBlogFormData({...blogFormData, imageUrl: e.target.value})}\n                            className=\"bg-white/10 border-white/20 text-white placeholder:text-white/60 mt-2\"\n                            placeholder=\"Optional image for the blog post\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-white text-sm font-medium\">Read Time</label>\n                          <Input \n                            value={blogFormData.readTime || ''}\n                            onChange={(e) => setBlogFormData({...blogFormData, readTime: e.target.value})}\n                            className=\"bg-white/10 border-white/20 text-white placeholder:text-white/60 mt-2\"\n                            placeholder=\"e.g., 5 min read\"\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"flex flex-row items-center justify-between rounded-lg border border-white/20 p-4\">\n                        <div className=\"space-y-0.5\">\n                          <label className=\"text-white text-sm font-medium\">Publish Blog Post</label>\n                          <div className=\"text-sm text-white/60\">\n                            Make this blog post visible on the blog page\n                          </div>\n                        </div>\n                        <input\n                          type=\"checkbox\"\n                          checked={blogFormData.published || false}\n                          onChange={(e) => setBlogFormData({...blogFormData, published: e.target.checked})}\n                          className=\"h-4 w-4\"\n                          data-testid=\"switch-published\"\n                        />\n                      </div>\n\n                      <div className=\"flex gap-4\">\n                        <Button type=\"submit\" className=\"bg-gradient-to-r from-green-500 to-purple-500\">\n                          <Save className=\"w-4 h-4 mr-2\" />\n                          {editingBlogPost ? 'Update' : 'Create'} Blog Post\n                        </Button>\n                        <Button type=\"button\" variant=\"outline\" onClick={resetBlogForm} className=\"border-red/20 text-white hover:bg-white/10\">\n                          <X className=\"w-4 h-4 mr-2\" />\n                          Cancel\n                        </Button>\n                      </div>\n                    </form>\n                  </CardContent>\n                </Card>\n              )}\n\n              <div className=\"grid gap-6\">\n                {blogLoading ? (\n                  <Card className=\"bg-white/10 backdrop-blur-md border-white/20\">\n                    <CardContent className=\"p-12 text-center\">\n                      <div className=\"text-white\">Loading blog posts...</div>\n                    </CardContent>\n                  </Card>\n                ) : blogPosts.length === 0 ? (\n                  <Card className=\"bg-white/10 backdrop-blur-md border-white/20\">\n                    <CardContent className=\"p-12 text-center\">\n                      <FileText className=\"w-16 h-16 text-white/40 mx-auto mb-4\" />\n                      <h3 className=\"text-xl font-bold text-white mb-2\">No blog posts yet</h3>\n                      <p className=\"text-white/60 mb-4\">Create your first blog post to get started</p>\n                      <Button\n                        onClick={() => {setShowForm(true); setActiveTab(\"blog\")}}\n                        className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600\"\n                        data-testid=\"button-create-first-blog\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Create First Blog Post\n                      </Button>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  blogPosts.map((post) => (\n                    <Card key={post.id} className=\"bg-white/10 backdrop-blur-md border-white/20\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-3 mb-2\">\n                              <h3 className=\"text-xl font-bold text-white\">{post.title}</h3>\n                              <Badge variant=\"outline\" className=\"border-white/30 text-white/80\">\n                                {post.category}\n                              </Badge>\n                              {post.published && (\n                                <Badge className=\"bg-purple-500/20 text-purple-300 border-purple-500/30\">\n                                  Published\n                                </Badge>\n                              )}\n                            </div>\n                            <p className=\"text-white/80 mb-3\">{post.excerpt || \"No excerpt provided\"}</p>\n                            <p className=\"text-white/60 text-sm\">\n                              Created: {post.createdAt ? new Date(post.createdAt).toLocaleDateString() : 'Date unknown'}\n                            </p>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => startBlogEdit(post)}\n                              className=\"border-white/20 text-white hover:bg-white/10 bg-[#554491]\"\n                              data-testid={`button-edit-blog-${post.id}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => deleteBlogMutation.mutate(post.id)}\n                              className=\"border-red-500/20 text-red-300 hover:bg-red-500/10\"\n                              data-testid={`button-delete-blog-${post.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"testimonials\" className=\"space-y-6\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-2xl font-bold text-white\">Testimonials Management</h2>\n                <Button\n                  onClick={() => {setShowForm(true); setActiveTab(\"testimonials\")}}\n                  className=\"bg-gradient-to-r from-green-500 to-teal-500 hover:from-green-600 hover:to-teal-600\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Testimonial\n                </Button>\n              </div>\n\n              {showForm && activeTab === \"testimonials\" && (\n                <Card className=\"mb-8 bg-white/10 backdrop-blur-md border-white/20\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white\">Add New Testimonial</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <form onSubmit={handleTestimonialSubmit} className=\"space-y-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <label className=\"text-white text-sm font-medium\">Name</label>\n                          <Input \n                            value={testimonialFormData.name}\n                            onChange={(e) => setTestimonialFormData({...testimonialFormData, name: e.target.value})}\n                            className=\"bg-white/10 border-white/20 text-white placeholder:text-white/60 mt-2\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-white text-sm font-medium\">Role</label>\n                          <Input \n                            value={testimonialFormData.role}\n                            onChange={(e) => setTestimonialFormData({...testimonialFormData, role: e.target.value})}\n                            className=\"bg-white/10 border-white/20 text-white placeholder:text-white/60 mt-2\"\n                          />\n                        </div>\n                      </div>\n\n                      <div>\n                        <label className=\"text-white text-sm font-medium\">Company</label>\n                        <Input \n                          value={testimonialFormData.company}\n                          onChange={(e) => setTestimonialFormData({...testimonialFormData, company: e.target.value})}\n                          className=\"bg-white/10 border-white/20 text-white placeholder:text-white/60 mt-2\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <label className=\"text-white text-sm font-medium\">Testimonial Content</label>\n                        <Textarea \n                          value={testimonialFormData.content}\n                          onChange={(e) => setTestimonialFormData({...testimonialFormData, content: e.target.value})}\n                          className=\"bg-white/10 border-white/20 text-white placeholder:text-white/60 mt-2\"\n                          rows={4}\n                        />\n                      </div>\n\n                      <div className=\"flex gap-4\">\n                        <Button type=\"submit\" className=\"bg-gradient-to-r from-green-500 to-purple-500\">\n                          <Save className=\"w-4 h-4 mr-2\" />\n                          Create Testimonial\n                        </Button>\n                        <Button type=\"button\" variant=\"outline\" onClick={resetTestimonialForm} className=\"border-white/20 text-white hover:bg-white/10\">\n                          <X className=\"w-4 h-4 mr-2\" />\n                          Cancel\n                        </Button>\n                      </div>\n                    </form>\n                  </CardContent>\n                </Card>\n              )}\n\n              <div className=\"grid gap-6\">\n                {testimonials.map((testimonial) => (\n                  <Card key={testimonial.id} className=\"bg-white/10 backdrop-blur-md border-white/20\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3 mb-2\">\n                            <h3 className=\"text-xl font-bold text-white\">{testimonial.name}</h3>\n                            <Badge variant=\"outline\" className=\"border-white/30 text-white/80\">\n                              {testimonial.role} at {testimonial.company}\n                            </Badge>\n                            {testimonial.featured && (\n                              <Badge className=\"bg-yellow-500/20 text-yellow-300 border-yellow-500/30\">\n                                Featured\n                              </Badge>\n                            )}\n                          </div>\n                          <p className=\"text-white/80\">{testimonial.content}</p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => deleteTestimonialMutation.mutate(testimonial.id)}\n                            className=\"border-red-500/20 text-red-300 hover:bg-red-500/10\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"resumes\" className=\"space-y-6\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-2xl font-bold text-white\">Resume Management</h2>\n                <div>\n                  <Input\n                    type=\"file\"\n                    accept=\".pdf,.doc,.docx,.txt\"\n                    onChange={(e) => {\n                      const file = e.target.files?.[0];\n                      if (file) {\n                        handleResumeUpload(file);\n                      }\n                    }}\n                    className=\"hidden\"\n                    id=\"resume-upload\"\n                    data-testid=\"input-resume-upload\"\n                  />\n                  <Button\n                    onClick={() => document.getElementById('resume-upload')?.click()}\n                    className=\"bg-gradient-to-r from-pink-500 to-violet-500 hover:from-pink-600 hover:to-violet-600\"\n                    data-testid=\"button-upload-resume\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Upload Resume\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"grid gap-6\">\n                {resumes.map((resume) => (\n                  <Card key={resume.id} className=\"bg-white/10 backdrop-blur-md border-white/20\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3 mb-3\">\n                            <h3 className=\"text-xl font-bold text-white\">{resume.originalName}</h3>\n                            {resume.isActive && (\n                              <Badge className=\"bg-green-500/20 text-green-300 border-green-500/30\">\n                                Active\n                              </Badge>\n                            )}\n                          </div>\n                          \n                          {resume.parsedContent && (\n                            <div className=\"mb-4 p-4 bg-white/5 rounded-lg\">\n                              <h4 className=\"text-white font-medium mb-2\">Parsed Content Preview:</h4>\n                              <div className=\"text-white/80 text-sm\">\n                                <p className=\"line-clamp-3\">{resume.parsedContent.substring(0, 200)}...</p>\n                              </div>\n                            </div>\n                          )}\n                          \n                          <p className=\"text-white/60 text-sm\">\n                            Uploaded: {resume.uploadedAt ? new Date(resume.uploadedAt).toLocaleDateString() : 'Date unknown'}\n                          </p>\n                        </div>\n                        \n                        <div className=\"flex gap-2\">\n                          {!resume.isActive && (\n                            <Button\n                              onClick={() => activateResumeMutation.mutate(resume.id)}\n                              size=\"sm\"\n                              className=\"bg-green-500/20 hover:bg-green-500/30 text-green-300\"\n                              data-testid={`button-activate-resume-${resume.id}`}\n                            >\n                              Set Active\n                            </Button>\n                          )}\n                          <Button\n                            onClick={() => deleteResumeMutation.mutate(resume.id)}\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            className=\"bg-red-500/20 hover:bg-red-500/30\"\n                            data-testid={`button-delete-resume-${resume.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n                \n                {resumes.length === 0 && (\n                  <Card className=\"bg-white/10 backdrop-blur-md border-white/20\">\n                    <CardContent className=\"p-12 text-center\">\n                      <FileText className=\"w-16 h-16 text-white/40 mx-auto mb-4\" />\n                      <h3 className=\"text-xl font-bold text-white mb-2\">No resumes uploaded</h3>\n                      <p className=\"text-white/60 mb-4\">Upload your first resume to get started</p>\n                      <Button\n                        onClick={() => document.getElementById('resume-upload')?.click()}\n                        className=\"bg-gradient-to-r from-pink-500 to-violet-500 hover:from-pink-600 hover:to-violet-600\"\n                        data-testid=\"button-upload-first-resume\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Upload Resume\n                      </Button>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"contacts\" className=\"space-y-6\">\n              <h2 className=\"text-2xl font-bold text-white\">Contact Messages</h2>\n              \n              <div className=\"grid gap-6\">\n                {contacts.map((contact) => (\n                  <Card key={contact.id} className=\"bg-white/10 backdrop-blur-md border-white/20\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3 mb-2\">\n                            <h3 className=\"text-xl font-bold text-white\">{contact.firstName} {contact.lastName}</h3>\n                            <Badge variant=\"outline\" className=\"border-white/30 text-white/80\">\n                              {contact.email}\n                            </Badge>\n                            {contact.company && (\n                              <Badge variant=\"outline\" className=\"border-purple-500/30 text-purple-300\">\n                                {contact.company}\n                              </Badge>\n                            )}\n                          </div>\n                          <p className=\"text-white/80 mb-3\">{contact.message}</p>\n                          <p className=\"text-white/60 text-sm\">\n                            Received: {contact.createdAt ? new Date(contact.createdAt).toLocaleDateString() : 'Date unknown'}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":53596},"client/src/pages/blog-post.tsx":{"content":"import { useParams, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ArrowLeft, Calendar, Clock } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { BlogPost } from \"@shared/schema\";\nimport MarkdownContent from \"@/components/markdown-content\";\n\nexport default function BlogPostPage() {\n  const { id } = useParams<{ id: string }>();\n\n  const {\n    data: post,\n    isLoading,\n    error,\n  } = useQuery<BlogPost>({\n    queryKey: [\"/api/blog\", id],\n    enabled: !!id,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"py-20\">\n        <div className=\"max-w-4xl mx-auto px-6 lg:px-8\">\n          <Skeleton className=\"h-8 w-32 mb-6\" />\n          <Skeleton className=\"h-12 w-3/4 mb-4\" />\n          <Skeleton className=\"h-6 w-1/2 mb-8\" />\n          <Skeleton className=\"h-64 w-full mb-8\" />\n          <div className=\"space-y-4\">\n            <Skeleton className=\"h-4 w-full\" />\n            <Skeleton className=\"h-4 w-5/6\" />\n            <Skeleton className=\"h-4 w-4/5\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !post) {\n    return (\n      <div className=\"py-20\">\n        <div className=\"max-w-4xl mx-auto px-6 lg:px-8 text-center\">\n          <h1 className=\"text-2xl font-bold text-brand-slate mb-4\">\n            Article Not Found\n          </h1>\n          <p className=\"text-slate-600 mb-8\">\n            The article you're looking for doesn't exist.\n          </p>\n          <Link href=\"/blog\">\n            <Button>Back to Blog</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-20\">\n      <div className=\"max-w-4xl mx-auto px-6 lg:px-8\">\n        {/* Back Navigation */}\n        <Link href=\"/blog\">\n          <Button variant=\"ghost\" className=\"mb-8\" data-testid=\"back-to-blog\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Blog\n          </Button>\n        </Link>\n\n        {/* Article Header */}\n        <header className=\"mb-12\">\n          <Badge className=\"mb-4\" data-testid=\"post-category\">\n            {post.category}\n          </Badge>\n          <h1\n            className=\"text-4xl lg:text-5xl font-bold text-brand-slate mb-6\"\n            data-testid=\"post-title\"\n          >\n            {post.title}\n          </h1>\n          <p\n            className=\"text-xl text-slate-600 leading-relaxed mb-6\"\n            data-testid=\"post-excerpt\"\n          >\n            {post.excerpt}\n          </p>\n\n          {/* Article Meta */}\n          <div className=\"flex items-center text-slate-500 space-x-6\">\n            <div className=\"flex items-center\">\n              <Calendar className=\"h-4 w-4 mr-2\" />\n              <span data-testid=\"post-date\">\n                {new Date(post.createdAt!).toLocaleDateString(\"en-US\", {\n                  year: \"numeric\",\n                  month: \"long\",\n                  day: \"numeric\",\n                })}\n              </span>\n            </div>\n            {post.readTime && (\n              <div className=\"flex items-center\">\n                <Clock className=\"h-4 w-4 mr-2\" />\n                <span data-testid=\"post-read-time\">{post.readTime}</span>\n              </div>\n            )}\n          </div>\n        </header>\n\n        {/* Featured Image */}\n        {post.imageUrl && (\n          <div className=\"mb-12\">\n            <img\n              src={post.imageUrl}\n              alt={post.title}\n              className=\"w-full h-96 object-cover rounded-2xl shadow-lg\"\n              data-testid=\"post-image\"\n            />\n          </div>\n        )}\n\n        {/* Article Content */}\n        <article data-testid=\"post-content\">\n          <MarkdownContent content={post.content} />\n        </article>\n\n        {/* Article Footer */}\n        <footer className=\"border-t border-slate-200 pt-12 mt-12\">\n          <div className=\"text-center\">\n            <h3 className=\"text-xl font-bold text-brand-slate mb-4\">\n              Enjoyed this article?\n            </h3>\n            <p className=\"text-slate-600 mb-6\">\n              Check out more insights on instructional design and learning\n              technology.\n            </p>\n            <Link href=\"/blog\">\n              <Button\n                variant=\"outline\"\n                className=\"border-brand-purple text-brand-purple hover:bg-brand-purple hover:text-white\"\n                data-testid=\"more-articles-button\"\n              >\n                Read More Articles\n              </Button>\n            </Link>\n          </div>\n        </footer>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4641},"client/src/pages/blog.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport BlogCard from \"@/components/blog-card\";\nimport { BlogPost } from \"@shared/schema\";\nimport testiImage from \"../assets/Tes4.jpg\";\n\nexport default function Blog() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: blogPosts = [], isLoading, error } = useQuery({\n    queryKey: [\"/api/blog\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/blog?published=true\");\n      if (!res.ok) {\n        throw new Error('Failed to fetch blog posts');\n      }\n      const data = await res.json();\n      // Ensure we always return an array\n      return Array.isArray(data) ? data : [];\n    },\n  });\n\n  const filteredPosts = blogPosts.filter((post: BlogPost) => {\n    const matchesSearch = !searchTerm || \n      post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      post.excerpt.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      post.content.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    return matchesSearch;\n  });\n\n  return (\n    <div className=\"py-20 bg-gradient-to-br from-indigo-900 via-purple-600 via-pink-500 to-amber-400 min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"py-20 relative\">\n        <div className=\"max-w-4xl mx-auto px-6 lg:px-8 text-center\">\n          <h1 className=\"text-4xl lg:text-5xl font-bold text-white mb-6 drop-shadow-lg\">\n            Blog & Insights\n          </h1>\n          <p className=\"text-xl text-white/90 leading-relaxed\">\n            Thoughts on instructional design trends, learning technology, and creating effective educational experiences\n          </p>\n        </div>\n      </section>\n\n      {/* Blog Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          \n          {/* Search Bar */}\n          <div className=\"mb-12\">\n            <div className=\"relative max-w-md mx-auto\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search articles...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 bg-gray-50 border-gray-200 text-gray-900 placeholder:text-gray-500 focus:border-gray-400 focus:ring-gray-400\"\n                data-testid=\"blog-search\"\n              />\n            </div>\n          </div>\n          \n          {/* Blog Posts List - Medium Style */}\n          {error ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-lg text-red-600\">\n                Unable to load blog posts. Please try again later.\n              </p>\n            </div>\n          ) : isLoading ? (\n            <div className=\"max-w-4xl mx-auto space-y-12\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"flex items-start gap-6\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3 mb-4\">\n                        <div className=\"w-6 h-6 bg-gray-200 rounded-full\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-32\"></div>\n                      </div>\n                      <div className=\"h-8 bg-gray-200 rounded mb-3\"></div>\n                      <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                      <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-4\"></div>\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-12\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\n                      </div>\n                    </div>\n                    <div className=\"w-40 h-32 bg-gray-200 rounded\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : filteredPosts.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-lg text-gray-600\">\n                {searchTerm ? `No articles found matching \"${searchTerm}\".` : \"No articles found.\"}\n              </p>\n            </div>\n          ) : (\n            <div className=\"max-w-4xl mx-auto space-y-12\">\n              {filteredPosts.map((post: BlogPost) => (\n                <BlogCard key={post.id} post={post} />\n              ))}\n            </div>\n          )}\n\n          {/* Results Count */}\n          {!isLoading && blogPosts.length > 0 && (\n            <div className=\"text-center mt-12\">\n              <p className=\"text-gray-500\">\n                {searchTerm \n                  ? `Showing ${filteredPosts.length} of ${blogPosts.length} articles matching \"${searchTerm}\"`\n                  : `Showing ${filteredPosts.length} articles`\n                }\n              </p>\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":5170},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Mail, Linkedin, MapPin, Download, Calendar, Send, X, Youtube } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertContactSchema, type InsertContact } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst projectTypes = [\n  \"eLearning Development\",\n  \"Corporate Training\", \n  \"Mobile Learning\",\n  \"Assessment Design\",\n  \"Learning Strategy\",\n  \"Other\"\n];\n\nexport default function Contact() {\n  const { toast } = useToast();\n\n  const form = useForm<InsertContact>({\n    resolver: zodResolver(insertContactSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      company: \"\",\n      projectType: \"\",\n      message: \"\",\n    },\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: (data: InsertContact) => apiRequest(\"POST\", \"/api/contact\", data),\n    onSuccess: () => {\n      toast({\n        title: \"Message sent successfully!\",\n        description: \"Thank you for reaching out. I'll get back to you soon.\",\n      });\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to send message\",\n        description: \"Please try again or contact me directly via email.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertContact) => {\n    contactMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"py-20 bg-gradient-to-br from-indigo-900 via-purple-600 via-pink-500 to-amber-400 min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"py-20 relative\">\n        <div className=\"max-w-4xl mx-auto px-6 lg:px-8 text-center\">\n          <h1 className=\"text-4xl lg:text-5xl font-bold text-white mb-6 drop-shadow-lg\">\n            Let's Create Something Amazing\n          </h1>\n          <p className=\"text-xl text-white/90 leading-relaxed\">\n            Ready to transform your training programs? Let's discuss how we can create engaging learning experiences that drive real results.\n          </p>\n        </div>\n      </section>\n\n      {/* Contact Section */}\n      <section className=\"py-20\">\n        <div className=\"max-w-4xl mx-auto px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12\">\n\n            {/* Contact Information */}\n            <div className=\"space-y-8\">\n              <div>\n                <h3 className=\"text-2xl font-bold text-white mb-6 drop-shadow-lg\">Get In Touch</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start space-x-4\">\n                    <a\n                      href=\"mailto:your.email@example.com\"\n                      className=\"w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center flex-shrink-0 hover:bg-white/30 transition-colors\"\n                      title=\"Send an email\"\n                      data-testid=\"email-link\"\n                    >\n                      <Mail className=\"h-6 w-6 text-white\" />\n                    </a>\n                    <a\n                      href=\"https://x.com/themoyoursalau?s=21\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center flex-shrink-0 hover:bg-white/30 transition-colors\"\n                      title=\"Visit X profile\"\n                      data-testid=\"x-link\"\n                    >\n                      <X className=\"h-6 w-6 text-white\" />\n                    </a>\n                    <a\n                      href=\"https://www.youtube.com/@moyoursalau\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center flex-shrink-0 hover:bg-white/30 transition-colors\"\n                      title=\"Visit YouTube channel\"\n                      data-testid=\"youtube-link\"\n                    >\n                      <Youtube className=\"h-6 w-6 text-white\" />\n                    </a>\n                    <a\n                      href=\"https://www.linkedin.com/in/kazeem-salau-164b1087/\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center flex-shrink-0 hover:bg-white/30 transition-colors\"\n                      title=\"Visit LinkedIn profile\"\n                      data-testid=\"linkedin-link\"\n                    >\n                      <Linkedin className=\"h-6 w-6 text-white\" />\n                    </a>\n                  </div>\n\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <MapPin className=\"h-6 w-6 text-white\" />\n                    </div>\n                    <div>\n                      <p className=\"font-semibold text-white\">Location</p>\n                      <p className=\"text-white/80\" data-testid=\"contact-location\">Manchester, United Kingdom</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Quick Links */}\n              <div>\n                <h4 className=\"text-lg font-semibold text-white mb-4\">Quick Links</h4>\n                <div className=\"flex flex-wrap gap-4\">\n                  <Button \n                    variant=\"outline\"\n                    className=\"text-white bg-white/10 border-white/40 hover:bg-gradient-to-r hover:from-pink-400 hover:via-purple-500 hover:to-indigo-500 hover:text-white hover:border-transparent\"\n                    data-testid=\"download-resume\"\n                  >\n                    <Download className=\"mr-2 h-4 w-4\" />\n                    Download Resume\n                  </Button>\n                  <Button \n                    variant=\"outline\"\n                    className=\"border-white/40 text-white bg-white/10 border-white/40 hover:bg-gradient-to-r hover:from-pink-400 hover:via-purple-500 hover:to-indigo-500 hover:text-white hover:border-transparent\"\n                    data-testid=\"schedule-call\"\n                  >\n                    <Calendar className=\"mr-2 h-4 w-4\" />\n                    Schedule Call\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Contact Form */}\n            <div className=\"bg-white/10 backdrop-blur-md rounded-2xl p-8 shadow-lg border border-white/20\">\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"firstName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-white\">First Name</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Your first name\" \n                              {...field}\n                              className=\"bg-white/20 border-white/30 text-white placeholder:text-white/60\"\n                              data-testid=\"input-firstName\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"lastName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-white\">Last Name</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Your last name\" \n                              {...field}\n                              className=\"bg-white/20 border-white/30 text-white placeholder:text-white/60\"\n                              data-testid=\"input-lastName\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-white\">Email</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"email\"\n                            placeholder=\"kazeem.salau@yahoo.com\" \n                            {...field}\n                            className=\"bg-white/20 border-white/30 text-white placeholder:text-white/60\"\n                            data-testid=\"input-email\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"company\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-white\">Company</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Your company name\" \n                            {...field}\n                            value={field.value || \"\"}\n                            className=\"bg-white/20 border-white/30 text-white placeholder:text-white/60\"\n                            data-testid=\"input-company\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"projectType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-white\">Project Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value || undefined}>\n                          <FormControl>\n                            <SelectTrigger className=\"bg-white/20 border-white/30 text-[#ffffff]\" data-testid=\"select-projectType\">\n                              <SelectValue\n                                placeholder=\"Select project type\"\n                                className=\"text-white data-[placeholder]:text-white/60\"\n                              />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent className=\"bg-white/95 backdrop-blur-md\">\n                            {projectTypes.map((type) => (\n                              <SelectItem key={type} value={type}>\n                                {type}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"message\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-white\">Message</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            rows={5}\n                            placeholder=\"Tell me about your project...\"\n                            className=\"resize-none bg-white/20 border-white/30 text-white placeholder:text-white/60\"\n                            {...field}\n                            data-testid=\"textarea-message\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-gradient-to-r from-pink-400 via-purple-500 to-indigo-500 text-white hover:from-pink-500 hover:via-purple-600 hover:to-indigo-600 font-semibold\"\n                    disabled={contactMutation.isPending}\n                    data-testid=\"submit-contact-form\"\n                  >\n                    {contactMutation.isPending ? (\n                      \"Sending...\"\n                    ) : (\n                      <>\n                        <Send className=\"mr-2 h-4 w-4\" />\n                        Send Message\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </Form>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":13560},"client/src/pages/home.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight, Quote, Sparkles, Monitor } from \"lucide-react\";\nimport aboutMeImage from \"../assets/about-me.png\";\nimport testiImage from \"../assets/Tes4.jpg\";\nimport type { Project } from \"@/../../shared/schema\";\n\nexport default function Home() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const heroRef = useRef<HTMLElement>(null);\n  const testimonialsRef = useRef<HTMLElement>(null);\n  const projectsRef = useRef<HTMLElement>(null);\n\n  // Fetch projects from portfolio\n  const { data: projects = [], isLoading: projectsLoading } = useQuery<Project[]>({\n    queryKey: ['/api/projects'],\n  });\n\n  // Get the first project as featured (you can change this logic)\n  const featuredProject = projects && projects.length > 0 ? projects[0] : null;\n\n  const testimonials = [\n    {\n      word: \"TALENTED\",\n      name: \"Ruby\",\n      title: \"Global Talent Leader\",\n      quote: \"Kazeem is a highly talented instructional designer and eLearning developer who consistently delivers exceptional results. I wholeheartedly recommend Kazeem for any project or role that requires top-notch eLearning development and instructional design skills.\",\n    },\n    {\n      word: \"DEDICATED\",\n      name: \"Habeeb\",\n      title: \"Senior HR Analyst\",\n      quote: \"Kazeem is a good leader. He is a good communicator, a listener, dedicated to his work and a teacher. He is always ensuring everyone around him gets better.\",\n    },\n    {\n      word: \"MASTERY\",\n      name: \"Damilola\",\n      title: \"Senior Software Developer\",\n      quote: \"Kazeem is the best Product Designer I have ever worked with in my career.\",\n    },\n  ];\n\n  useEffect(() => {\n    setIsLoaded(true);\n\n    const handleMouseMove = (e: MouseEvent) => {\n      setMousePosition({\n        x: (e.clientX / window.innerWidth) * 2 - 1,\n        y: (e.clientY / window.innerHeight) * 2 - 1,\n      });\n    };\n\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    return () => window.removeEventListener(\"mousemove\", handleMouseMove);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen text-white overflow-x-hidden\">\n      {/* Floating background particles */}\n      <div className=\"fixed inset-0 pointer-events-none z-0\">\n        {[...Array(20)].map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute w-2 h-2 bg-white/10 rounded-full\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n              animation: `float ${3 + Math.random() * 4}s ease-in-out infinite`,\n              animationDelay: `${Math.random() * 2}s`,\n              transform: `translate(${mousePosition.x * 10}px, ${mousePosition.y * 10}px)`,\n              transition: \"transform 0.1s ease-out\",\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Hero Section */}\n      <section ref={heroRef} className=\"relative min-h-screen flex items-center overflow-hidden\">\n        <div\n          className=\"absolute inset-0 bg-gradient-to-br from-indigo-900 via-purple-600 via-pink-500 to-amber-400\"\n          style={{\n            transform: `translate(${mousePosition.x * 5}px, ${mousePosition.y * 5}px)`,\n            transition: \"transform 0.3s ease-out\",\n          }}\n        />\n        <div className=\"absolute right-0 top-0 w-1/2 h-full flex items-center justify-center\">\n          <img\n            src={aboutMeImage}\n            alt=\"Kazeem Salau\"\n            className=\"w-full h-full object-cover hover:scale-105 transition-transform duration-700\"\n          />\n        </div>\n\n        <div className=\"relative z-10 px-8 lg:px-16 py-20 flex items-center min-h-screen\">\n          <div className=\"max-w-2xl\">\n            <h1 className=\"text-[15vw] lg:text-[12vw] xl:text-[10vw] font-black leading-[0.8] tracking-tighter mb-8 text-white drop-shadow-2xl\">\n              FOR<br />\n              <span className=\"bg-gradient-to-r from-white via-gray-100 to-white bg-clip-text text-transparent\">\n                LEARNING\n              </span>\n              <br />\n              DESIGN\n            </h1>\n            <div className=\"text-white/90 text-xl lg:text-2xl font-bold tracking-wide mb-4\">\n              KAZEEM SALAU\n            </div>\n            <div className=\"w-20 h-1.5 bg-white/70 rounded-full mb-8\"></div>\n            <p className=\"text-xl lg:text-2xl leading-relaxed mb-12 text-white/95 font-light\">\n              An experienced Instructional Designer and Learning Experience Designer specializing in contemporary and functional design. I bring learning solutions to life with purposeful, visually compelling experiences.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section ref={testimonialsRef} className=\"py-32 relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-cover bg-center bg-no-repeat opacity-40\" style={{ backgroundImage: `url(${testiImage})` }} />\n        <div className=\"absolute inset-0 bg-black/80\"></div>\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8 relative z-20 space-y-32\">\n          {testimonials.map((t, i) => (\n            <div key={i} className=\"testimonial-card text-center\">\n              <h2 className=\"text-8xl lg:text-9xl font-black text-white/10 tracking-wider\">{t.word}</h2>\n              <blockquote className=\"text-2xl lg:text-3xl leading-relaxed text-gray-300 my-6\">\n                \"{t.quote}\"\n              </blockquote>\n              <div className=\"text-xl font-bold text-white\">{t.name}</div>\n              <div className=\"text-lg text-white/80\">{t.title}</div>\n            </div>\n          ))}\n        </div>\n      </section>\n\n      {/* Featured Project Section */}\n      <section ref={projectsRef} className=\"py-32 bg-gradient-to-br from-indigo-900 via-purple-600 via-pink-500 to-amber-400 relative\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8 relative z-10\">\n          <div className=\"text-center mb-20\">\n            <h2 className=\"text-5xl lg:text-6xl font-black text-white mb-8 drop-shadow-lg\">\n              Featured Project\n            </h2>\n            <p className=\"text-xl text-white/90 leading-relaxed max-w-3xl mx-auto\">\n              Transformative learning experiences that drive measurable results.\n            </p>\n          </div>\n\n          {/* Loading State */}\n          {projectsLoading && (\n            <div className=\"bg-white/10 backdrop-blur-md rounded-3xl p-8 border border-white/20\">\n              <div className=\"grid lg:grid-cols-2 gap-16 items-center\">\n                <div className=\"space-y-6\">\n                  <div className=\"h-4 bg-white/20 rounded animate-pulse\"></div>\n                  <div className=\"h-12 bg-white/20 rounded animate-pulse\"></div>\n                  <div className=\"h-8 bg-white/20 rounded animate-pulse\"></div>\n                  <div className=\"h-20 bg-white/20 rounded animate-pulse\"></div>\n                  <div className=\"flex gap-3\">\n                    <div className=\"h-8 w-24 bg-white/20 rounded-full animate-pulse\"></div>\n                    <div className=\"h-8 w-20 bg-white/20 rounded-full animate-pulse\"></div>\n                    <div className=\"h-8 w-16 bg-white/20 rounded-full animate-pulse\"></div>\n                  </div>\n                </div>\n                <div className=\"bg-white/10 rounded-2xl h-80 animate-pulse\"></div>\n              </div>\n            </div>\n          )}\n\n          {/* Featured Project Card */}\n          {!projectsLoading && featuredProject && (\n            <div className=\"project-card bg-white/10 backdrop-blur-md rounded-3xl p-8 border border-white/20 hover:bg-white/15 transition-all duration-500 hover:scale-105\">\n              <div className=\"grid lg:grid-cols-2 gap-16 items-center\">\n                {/* Left: Info */}\n                <div className=\"space-y-6\">\n                  <div className=\"text-sm uppercase tracking-widest text-white/70 font-semibold\">\n                    {featuredProject.category || \"Featured Work\"}\n                  </div>\n                  <h3 className=\"text-4xl lg:text-5xl font-bold text-white leading-tight\">\n                    {featuredProject.title}\n                  </h3>\n                  <p className=\"text-xl text-white/90 leading-relaxed\">{featuredProject.description}</p>\n                  {featuredProject.tools && featuredProject.tools.length > 0 && (\n                    <div className=\"flex flex-wrap gap-3\">\n                      {featuredProject.tools.map((tool: string, idx: number) => (\n                        <span key={idx} className=\"px-4 py-2 bg-white/20 rounded-full text-sm font-medium text-white border border-white/30\">\n                          {tool}\n                        </span>\n                      ))}\n                    </div>\n                  )}\n                  <Link href={`/portfolio/${featuredProject.id}`}>\n                    <Button className=\"mt-6 bg-gradient-to-r from-pink-400 to-purple-400 text-white px-6 py-3 rounded-full flex items-center gap-2\">\n                      View Case Study <ArrowRight className=\"w-4 h-4\" />\n                    </Button>\n                  </Link>\n                </div>\n\n                {/* Right: Image */}\n                <div className=\"bg-white/10 rounded-2xl p-8 h-80 flex items-center justify-center backdrop-blur-sm border border-white/20\">\n                  {featuredProject.imageUrl ? (\n                    <img\n                      src={featuredProject.imageUrl}\n                      alt={featuredProject.title}\n                      className=\"w-full h-full object-cover rounded-2xl\"\n                      onError={(e) => {\n                        const target = e.target as HTMLImageElement;\n                        target.style.display = 'none';\n                      }}\n                    />\n                  ) : (\n                    <div className=\"text-white/60 text-lg flex items-center gap-2\">\n                      <Monitor className=\"w-8 h-8\" />\n                      Project Visual\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* No Projects State */}\n          {!projectsLoading && (!projects || projects.length === 0) && (\n            <div className=\"bg-white/10 backdrop-blur-md rounded-3xl p-16 border border-white/20 text-center\">\n              <div className=\"text-white/60 text-xl mb-4\">No projects available</div>\n              <Link href=\"/portfolio\">\n                <Button className=\"bg-gradient-to-r from-pink-400 to-purple-400 text-white px-6 py-3 rounded-full\">\n                  View All Projects\n                </Button>\n              </Link>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Contact Section */}\n      <section className=\"py-32 bg-black text-center\">\n        <h2 className=\"text-6xl lg:text-7xl font-bold text-white mb-16 leading-tight\">\n          Let's Start a<br />Conversation\n        </h2>\n        <p className=\"text-2xl lg:text-3xl text-gray-300 mb-16 leading-relaxed\">\n          Drop me a message, let's make something learners will love.\n        </p>\n        <div className=\"flex justify-center gap-8\">\n          <Link href=\"/contact\">\n            <Button className=\"bg-gradient-to-r from-purple-400 via-pink-400 to-rose-400 px-12 py-6 rounded-full text-xl font-semibold\">\n              Get In Touch \n            </Button>\n          </Link>\n          <Link href=\"/portfolio\">\n            <Button className=\"bg-gradient-to-r from-purple-400 via-pink-400 to-rose-400 px-12 py-6 rounded-full text-xl font-semibold\">\n              View Portfolio\n            </Button>\n          </Link>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":11879},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/portfolio.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Sparkles, ArrowRight, Target, Users, Brain, Zap, Calendar, ExternalLink, Filter, Monitor } from \"lucide-react\";\nimport { Project } from \"@shared/schema\";\n\nexport default function Portfolio() {\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const [activeFilter, setActiveFilter] = useState(\"all\");\n  const [hoveredProject, setHoveredProject] = useState<string | null>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    setIsLoaded(true);\n    const handleMouseMove = (e: MouseEvent) => {\n      setMousePosition({ x: e.clientX, y: e.clientY });\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n    return () => window.removeEventListener('mousemove', handleMouseMove);\n  }, []);\n\n  const { data: projects = [], isLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const categories = [\n    { id: \"Digital\", label: \"Digital Learning\", icon: Target, count: projects.length },\n    { id: \"mobile\", label: \"Mobile Experiences\", icon: Brain, count: projects.filter(p => p.category === \"elearning\").length },\n    { id: \"Corporate\", label: \"Corporate Training\", icon: Zap, count: projects.filter(p => p.category === \"mobile\").length },\n    { id: \"Game\", label: \"Gamified\", icon: Users, count: projects.filter(p => p.category === \"corporate\").length },\n  ];\n\n  const filteredProjects = projects.filter((project: Project) => {\n    return activeFilter === \"all\" || project.category === activeFilter;\n  });\n\n  const impactStats = [\n    { number: \"150K+\", label: \"Learners Transformed\", icon: Users },\n    { number: \"95%\", label: \"Satisfaction Rate\", icon: Target },\n    { number: \"40+\", label: \"Projects Delivered\", icon: Sparkles },\n    { number: \"85%\", label: \"Performance Improvement\", icon: Brain },\n  ];\n\n  return (\n    <div className=\"bg-gradient-to-br from-indigo-900 via-purple-600 via-pink-500 to-amber-400 min-h-screen overflow-x-hidden\">\n      {/* Interactive Cursor */}\n      <div \n        className=\"fixed w-8 h-8 bg-white/20 rounded-full pointer-events-none z-50 mix-blend-difference\"\n        style={{\n          left: mousePosition.x - 16,\n          top: mousePosition.y - 16,\n          transition: 'all 0.1s ease-out',\n          transform: hoveredProject ? 'scale(2)' : 'scale(1)'\n        }}\n      />\n      {/* Hero Section - Dramatic Impact Statement */}\n      <section className=\"relative min-h-screen flex items-center pt-20 overflow-hidden\">\n        {/* Animated Background */}\n        <div className=\"absolute inset-0\">\n          {[...Array(15)].map((_, i) => (\n            <div\n              key={i}\n              className=\"absolute w-3 h-3 bg-white/10 rounded-full\"\n              style={{\n                left: `${Math.random() * 100}%`,\n                top: `${Math.random() * 100}%`,\n                animation: `float ${3 + Math.random() * 4}s ease-in-out infinite`,\n                animationDelay: `${Math.random() * 2}s`\n              }}\n            />\n          ))}\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8 w-full relative z-10\">\n          <div className=\"text-center space-y-16\">\n            \n            {/* Main Title */}\n            <div \n              className=\"space-y-8\"\n              style={{\n                transform: isLoaded ? 'translateY(0) scale(1)' : 'translateY(50px) scale(0.95)',\n                opacity: isLoaded ? 1 : 0,\n                transition: 'all 1.2s cubic-bezier(0.16, 1, 0.3, 1) 0.3s'\n              }}\n            >\n              <h1 className=\"text-7xl lg:text-9xl font-black text-white leading-[0.8] tracking-tighter\">\n                LEARNING\n                <br />\n                <span className=\"relative\">\n                  THAT\n                  <div className=\"absolute -bottom-4 left-1/2 transform -translate-x-1/2 w-32 h-2 bg-gradient-to-r from-pink-400 to-amber-400 rounded-full\" />\n                </span>\n                <br />\n                <span className=\"bg-gradient-to-r from-white to-white/60 bg-clip-text text-transparent\">\n                  TRANSFORMS\n                </span>\n              </h1>\n              \n              <p className=\"text-2xl lg:text-3xl text-white/90 max-w-4xl mx-auto leading-relaxed font-light\">\n                Every project tells a story of transformation. From confused to confident. \n                From overwhelmed to <span className=\"font-bold\">empowered</span>. \n                From knowing to <span className=\"italic\">doing</span>.\n              </p>\n            </div>\n\n            {/* Impact Stats */}\n            <div \n              className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-5xl mx-auto\"\n              style={{\n                transform: isLoaded ? 'translateY(0)' : 'translateY(30px)',\n                opacity: isLoaded ? 1 : 0,\n                transition: 'all 1s cubic-bezier(0.16, 1, 0.3, 1) 0.8s'\n              }}\n            >\n              {impactStats.map((stat, index) => (\n                <div key={index} className=\"relative group impact-stat-card\">\n                  <div className=\"absolute -inset-4 bg-gradient-to-r from-pink-400 via-purple-400 to-indigo-400 rounded-3xl blur-xl opacity-20 group-hover:opacity-40 transition-opacity duration-500\" />\n                  <div className=\"relative bg-white/5 backdrop-blur-sm rounded-3xl p-8 border border-white/20 group-hover:bg-white/10 group-hover:scale-[1.02] group-hover:shadow-xl group-hover:-translate-y-1 transition-all duration-500\">\n                    <div className=\"text-center space-y-4\">\n                      <stat.icon className=\"w-8 h-8 text-white mx-auto group-hover:scale-125 group-hover:rotate-6 transition-all duration-300\" />\n                      <div className=\"text-3xl font-black text-white group-hover:scale-110 transition-all duration-300\">{stat.number}</div>\n                      <div className=\"text-white/80 font-medium text-sm group-hover:text-white group-hover:translate-y-0.5 transition-all duration-300\">{stat.label}</div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <style>{`\n          @keyframes float {\n            0%, 100% { transform: translateY(0px) rotate(0deg); }\n            50% { transform: translateY(-20px) rotate(180deg); }\n          }\n          .impact-stat-card {\n            pointer-events: none !important;\n            user-select: none !important;\n            -webkit-user-select: none !important;\n            -moz-user-select: none !important;\n            -ms-user-select: none !important;\n          }\n          .impact-stat-card * {\n            pointer-events: none !important;\n            user-select: none !important;\n            -webkit-user-select: none !important;\n            -moz-user-select: none !important;\n            -ms-user-select: none !important;\n          }\n        `}</style>\n      </section>\n      {/* Project Categories - Creative Filter */}\n      <section className=\"py-20 bg-black/30 backdrop-blur-sm\">\n        <div className=\"max-w-6xl mx-auto px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-5xl lg:text-6xl font-black text-white mb-6\">\n              AREAS OF\n              <br />\n              <span className=\"text-white/50\">IMPACT</span>\n            </h2>\n            <p className=\"text-xl text-white/70 max-w-3xl mx-auto\">\n              Learning solutions that inspire, engage, and deliver results with combination of creativity, strategy, and technology to design experiences that not only transfer knowledge but also drive real change in the way people learn and work.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {categories.map((category, index) => (\n              <div\n                key={category.id}\n                className=\"relative group pointer-events-none select-none\"\n                data-testid={`filter-${category.id}`}\n              >\n                <div className=\"absolute -inset-4 bg-gradient-to-r from-pink-400 via-purple-400 to-indigo-400 rounded-3xl blur-xl opacity-20 group-hover:opacity-40 transition-opacity duration-500\" />\n                <div className=\"relative bg-white/5 backdrop-blur-sm rounded-3xl p-8 border border-white/20 group-hover:bg-white/10 group-hover:scale-[1.02] group-hover:shadow-xl group-hover:-translate-y-1 transition-all duration-500\">\n                  <div className=\"text-center space-y-4\">\n                    <category.icon className=\"w-8 h-8 text-white mx-auto group-hover:scale-125 group-hover:rotate-6 transition-all duration-300\" />\n                    <div className=\"text-3xl font-black text-white group-hover:scale-110 transition-all duration-300\">{category.count}</div>\n                    <div className=\"text-white/80 font-medium text-sm group-hover:text-white group-hover:translate-y-0.5 transition-all duration-300\">{category.label}</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n      {/* Projects Showcase - Storytelling Approach */}\n      <section className=\"py-32\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          {isLoading ? (\n            <div className=\"space-y-20\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"bg-white/10 h-64 rounded-3xl\"></div>\n                </div>\n              ))}\n            </div>\n          ) : filteredProjects.length === 0 ? (\n            <div className=\"text-center py-20\">\n              <Sparkles className=\"w-16 h-16 text-white/40 mx-auto mb-6\" />\n              <p className=\"text-2xl text-white/60\">No projects in this category yet.</p>\n            </div>\n          ) : (\n            <div className=\"space-y-32\">\n              {filteredProjects.map((project: Project, index) => (\n                <div \n                  key={project.id}\n                  className=\"group relative\"\n                  onMouseEnter={() => setHoveredProject(project.id)}\n                  onMouseLeave={() => setHoveredProject(null)}\n                >\n                  <div className={`grid lg:grid-cols-12 gap-16 items-center ${\n                    index % 2 === 1 ? 'lg:grid-flow-col-dense' : ''\n                  }`}>\n                    \n                    {/* Project Content */}\n                    <div className={`lg:col-span-7 space-y-8 ${\n                      index % 2 === 1 ? 'lg:col-start-6' : ''\n                    }`}>\n                      <div className=\"space-y-6\">\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"w-3 h-3 bg-gradient-to-r from-pink-400 to-purple-400 rounded-full group-hover:scale-150 transition-transform duration-300\" />\n                          <span className=\"text-white/60 text-sm uppercase tracking-wide font-medium\">\n                            {project.category?.replace('_', ' ') || 'Project'}\n                          </span>\n                        </div>\n                        \n                        <h3 className=\"text-4xl lg:text-5xl font-black text-white leading-tight group-hover:text-white/90 transition-colors duration-300\">\n                          {project.title}\n                        </h3>\n                        \n                        <p className=\"text-xl text-white/80 leading-relaxed max-w-2xl\">\n                          {project.description}\n                        </p>\n\n                        {/* Tools/Technologies */}\n                        {project.tools && project.tools.length > 0 && (\n                          <div className=\"flex flex-wrap gap-3\">\n                            {project.tools.map((tool, toolIndex) => (\n                              <span \n                                key={toolIndex}\n                                className=\"px-4 py-2 bg-white/10 backdrop-blur-md rounded-full text-white/90 text-sm font-medium border border-white/20\"\n                              >\n                                {tool}\n                              </span>\n                            ))}\n                          </div>\n                        )}\n\n                        {/* Call to Action */}\n                        <div className=\"flex flex-col gap-4\">\n                          <div className=\"flex items-center gap-6\">\n                            <Link \n                              href={`/portfolio/${project.id}`}\n                              className=\"group/btn bg-gradient-to-r from-pink-400 via-purple-500 to-indigo-500 text-white px-8 py-4 rounded-full font-bold hover:from-pink-500 hover:via-purple-600 hover:to-indigo-600 transition-all duration-300 flex items-center gap-3 hover:scale-105\"\n                            >\n                              View Case Study\n                              <ArrowRight className=\"w-4 h-4 group-hover/btn:translate-x-1 transition-transform\" />\n                            </Link>\n                            \n                            {project.scormUrl && (\n                              <div className=\"flex items-center gap-2 text-[#c4c4c4]\">\n                                <Monitor className=\"w-4 h-4\" />\n                                <span className=\"text-sm font-medium text-[#ffffff]\">Interactive Training Available</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Project Visual */}\n                    <div className={`lg:col-span-5 ${\n                      index % 2 === 1 ? 'lg:col-start-1' : ''\n                    }`}>\n                      <div className=\"relative group/visual\">\n                        <div className=\"absolute -inset-4 bg-gradient-to-r from-pink-400 via-purple-400 to-indigo-400 rounded-3xl blur-xl opacity-20 group-hover:opacity-40 transition-opacity duration-500\" />\n                        <div className=\"relative bg-white/5 backdrop-blur-sm rounded-3xl p-8 border border-white/20 group-hover:bg-white/10 transition-all duration-500\">\n                          <div className=\"aspect-video bg-gradient-to-br from-white/10 to-white/5 rounded-2xl overflow-hidden\">\n                            {project.imageUrl ? (\n                              <img \n                                src={project.imageUrl}\n                                alt={project.title}\n                                className=\"w-full h-full object-cover rounded-2xl group-hover/visual:scale-105 transition-transform duration-500\"\n                                onError={(e) => {\n                                  e.currentTarget.style.display = 'none';\n                                  const fallbackDiv = e.currentTarget.parentElement?.querySelector('.fallback-placeholder') as HTMLElement;\n                                  if (fallbackDiv) {\n                                    fallbackDiv.style.display = 'flex';\n                                  }\n                                }}\n                              />\n                            ) : null}\n                            <div \n                              className={`fallback-placeholder w-full h-full flex items-center justify-center ${project.imageUrl ? 'hidden' : 'flex'}`}\n                            >\n                              <div className=\"text-center space-y-4\">\n                                <Sparkles className=\"w-12 h-12 text-white/60 mx-auto\" />\n                                <p className=\"text-white/60 font-medium\">Project Preview</p>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n      {/* Call to Action */}\n      <section className=\"py-32 relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/20 via-purple-500/20 to-indigo-500/20\" />\n        \n        <div className=\"max-w-4xl mx-auto px-6 lg:px-8 text-center relative z-10\">\n          <div className=\"space-y-12\">\n            <div className=\"space-y-8\">\n              <h2 className=\"text-6xl lg:text-7xl font-black text-white leading-tight\">\n                YOUR PROJECT\n                <br />\n                <span className=\"bg-gradient-to-r from-pink-400 via-purple-400 to-indigo-400 bg-clip-text text-transparent\">\n                  COULD BE NEXT\n                </span>\n              </h2>\n              \n              <p className=\"text-2xl text-white/90 leading-relaxed max-w-2xl mx-auto\">\n                Ready to create learning experiences that your audience will remember, \n                apply, and share? Let's build something transformational together.\n              </p>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-6 justify-center\">\n              <a \n                href=\"/contact\"\n                className=\"group bg-gradient-to-r from-pink-400 via-purple-500 to-indigo-500 text-white px-12 py-6 rounded-full font-bold text-lg hover:from-pink-500 hover:via-purple-600 hover:to-indigo-600 transition-all duration-300 flex items-center justify-center gap-3 hover:scale-105\"\n              >\n                Start Your Project\n                <ArrowRight className=\"w-5 h-5 group-hover:translate-x-2 transition-transform\" />\n              </a>\n              <a \n                href=\"/about\"\n                className=\"bg-white/10 text-white px-12 py-6 rounded-full font-bold text-lg border-2 border-white/30 hover:bg-white/20 hover:border-white/50 transition-all duration-300 hover:scale-105\"\n              >\n                Learn My Process\n              </a>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":18137},"client/src/pages/project-detail.tsx":{"content":"import { useParams, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ArrowLeft, ExternalLink, Download, Play, Monitor, Sparkles, PlayCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Project } from \"@shared/schema\";\nimport { useState } from \"react\";\n\nexport default function ProjectDetail() {\n  const { id } = useParams<{ id: string }>();\n  const [showScormEmbed, setShowScormEmbed] = useState(false);\n  \n  const { data: project, isLoading, error } = useQuery<Project>({\n    queryKey: [\"/api/projects\", id],\n    enabled: !!id,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"py-20\">\n        <div className=\"max-w-4xl mx-auto px-6 lg:px-8\">\n          <Skeleton className=\"h-8 w-32 mb-6\" />\n          <Skeleton className=\"h-12 w-3/4 mb-4\" />\n          <Skeleton className=\"h-64 w-full mb-8\" />\n          <div className=\"space-y-4\">\n            <Skeleton className=\"h-4 w-full\" />\n            <Skeleton className=\"h-4 w-5/6\" />\n            <Skeleton className=\"h-4 w-4/5\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !project) {\n    return (\n      <div className=\"py-20\">\n        <div className=\"max-w-4xl mx-auto px-6 lg:px-8 text-center\">\n          <h1 className=\"text-2xl font-bold text-brand-slate mb-4\">Project Not Found</h1>\n          <p className=\"text-slate-600 mb-8\">The project you're looking for doesn't exist.</p>\n          <Link href=\"/portfolio\">\n            <Button>Back to Portfolio</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-20\">\n      <div className=\"max-w-4xl mx-auto px-6 lg:px-8\">\n        \n        {/* Back Navigation */}\n        <Link href=\"/portfolio\">\n          <Button variant=\"ghost\" className=\"mb-8\" data-testid=\"back-to-portfolio\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Portfolio\n          </Button>\n        </Link>\n\n        {/* Project Header */}\n        <div className=\"mb-12\">\n          <h1 className=\"text-4xl lg:text-5xl font-bold text-brand-slate mb-6\" data-testid=\"project-title\">\n            {project.title}\n          </h1>\n          <p className=\"text-xl text-slate-600 leading-relaxed mb-6\" data-testid=\"project-description\">\n            {project.description}\n          </p>\n          \n          {/* Tools Used */}\n          <div className=\"flex flex-wrap gap-2 mb-8\">\n            {project.tools?.map((tool: string, index: number) => (\n              <Badge \n                key={index} \n                variant=\"secondary\"\n                data-testid={`project-tool-${index}`}\n              >\n                {tool}\n              </Badge>\n            ))}\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex flex-wrap gap-4\">\n            {project.demoUrl && (\n              <Button \n                asChild\n                className=\"bg-brand-purple hover:bg-purple-600\"\n                data-testid=\"demo-button\"\n              >\n                <a href={project.demoUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                  <Play className=\"mr-2 h-4 w-4\" />\n                  View Demo\n                </a>\n              </Button>\n            )}\n            {project.caseStudyUrl && (\n              <Button \n                variant=\"outline\"\n                asChild\n                data-testid=\"case-study-button\"\n              >\n                <a href={project.caseStudyUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                  <ExternalLink className=\"mr-2 h-4 w-4\" />\n                  Case Study\n                </a>\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Project Image */}\n        <div className=\"mb-12\">\n          <div className=\"relative bg-gradient-to-br from-slate-100 to-slate-200 rounded-2xl overflow-hidden shadow-lg\">\n            <div className=\"aspect-video bg-gradient-to-br from-slate-100 to-slate-200\">\n              {project.imageUrl ? (\n                <img \n                  src={project.imageUrl}\n                  alt={project.title}\n                  className=\"w-full h-full object-cover rounded-2xl\"\n                  onError={(e) => {\n                    console.log('Image failed to load:', project.imageUrl);\n                    e.currentTarget.style.display = 'none';\n                    const fallbackDiv = e.currentTarget.parentElement?.querySelector('.fallback-placeholder') as HTMLElement;\n                    if (fallbackDiv) {\n                      fallbackDiv.style.display = 'flex';\n                    }\n                  }}\n                  onLoad={() => {\n                    console.log('Image loaded successfully:', project.imageUrl);\n                  }}\n                  data-testid=\"project-image\"\n                />\n              ) : null}\n              <div \n                className={`fallback-placeholder w-full h-full flex items-center justify-center rounded-2xl ${project.imageUrl ? 'hidden' : 'flex'}`}\n              >\n                <div className=\"text-center space-y-4\">\n                  <Sparkles className=\"w-16 h-16 text-slate-400 mx-auto\" />\n                  <p className=\"text-slate-500 font-medium text-lg\">Project Preview</p>\n                  <p className=\"text-slate-400 text-sm\">Visual content coming soon</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n\n        {/* Project Details */}\n        <div className=\"prose prose-lg max-w-none\">\n          <h2 className=\"text-2xl font-bold text-brand-slate mb-4\">Project Overview</h2>\n          <p className=\"text-slate-600 leading-relaxed mb-8\" data-testid=\"project-long-description\">\n            {project.longDescription || project.description}\n          </p>\n\n          {/* Project Sections */}\n          <div className=\"grid md:grid-cols-2 gap-8 mb-12\">\n            <div className=\"bg-white/50 backdrop-blur-sm rounded-xl p-6 border border-slate-200/50 hover:shadow-lg transition-all duration-300 hover:scale-[1.02] pointer-events-none select-none\">\n              <h3 className=\"text-xl font-bold text-brand-slate mb-4\">Challenge</h3>\n              <p className=\"text-slate-600\">\n                The project addressed the need for an innovative learning solution that could engage learners \n                while delivering measurable performance improvements in a complex organizational environment.\n              </p>\n            </div>\n            <div className=\"bg-white/50 backdrop-blur-sm rounded-xl p-6 border border-slate-200/50 hover:shadow-lg transition-all duration-300 hover:scale-[1.02] pointer-events-none select-none\">\n              <h3 className=\"text-xl font-bold text-brand-slate mb-4\">Solution</h3>\n              <p className=\"text-slate-600\">\n                Through careful analysis and user-centered design, we developed a comprehensive learning \n                experience that combines multiple modalities and leverages cutting-edge technology.\n              </p>\n            </div>\n            <div className=\"bg-white/50 backdrop-blur-sm rounded-xl p-6 border border-slate-200/50 hover:shadow-lg transition-all duration-300 hover:scale-[1.02] pointer-events-none select-none\">\n              <h3 className=\"text-xl font-bold text-brand-slate mb-4\">Process</h3>\n              <p className=\"text-slate-600\">\n                The project followed proven instructional design methodologies, incorporating stakeholder \n                feedback and iterative testing to ensure optimal learning outcomes.\n              </p>\n            </div>\n            <div className=\"bg-white/50 backdrop-blur-sm rounded-xl p-6 border border-slate-200/50 hover:shadow-lg transition-all duration-300 hover:scale-[1.02] pointer-events-none select-none\">\n              <h3 className=\"text-xl font-bold text-brand-slate mb-4\">Results</h3>\n              <p className=\"text-slate-600\">\n                The final solution exceeded expectations, demonstrating significant improvements in learner \n                engagement, knowledge retention, and on-the-job performance.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Interactive Training Section */}\n        {project.scormUrl && (\n          <div className=\"border-t border-slate-200 pt-12 mb-12\">\n            <div className=\"text-center mb-8\">\n              <h2 className=\"text-2xl font-bold text-brand-slate mb-4\">Interactive Training Experience</h2>\n              <p className=\"text-slate-600\">Experience the actual learning content from this project</p>\n            </div>\n            \n            {showScormEmbed ? (\n              <div className=\"bg-gradient-to-br from-slate-100 to-slate-200 rounded-2xl shadow-lg overflow-hidden border border-slate-300\">\n                <div className=\"bg-gradient-to-r from-purple-500 to-pink-500 px-6 py-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"bg-white/20 rounded-lg p-2\">\n                        <Monitor className=\"h-5 w-5 text-white\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold text-white\">Interactive Training Module</h3>\n                        <p className=\"text-white/80 text-sm\">Experience the actual learning content</p>\n                      </div>\n                    </div>\n                    <Button \n                      onClick={() => setShowScormEmbed(false)}\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-white hover:bg-white/20\"\n                    >\n                      ✕\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"relative bg-white aspect-video\">\n                  <iframe\n                    src={project.scormUrl}\n                    title={`${project.title} - Interactive Training`}\n                    className=\"w-full h-full border-0\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowFullScreen\n                    data-testid=\"scorm-iframe\"\n                  />\n                  <div className=\"absolute bottom-4 left-4 bg-black/70 backdrop-blur-sm px-3 py-2 rounded-lg text-xs text-white\">\n                    Interactive content by {project.title}\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center\">\n                <div className=\"inline-block\">\n                  <button\n                    onClick={() => setShowScormEmbed(true)}\n                    className=\"group relative\"\n                  >\n                    <div className=\"absolute -inset-6 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full blur-xl opacity-20 group-hover:opacity-40 transition-opacity duration-500\" />\n                    <div className=\"relative bg-gradient-to-r from-purple-500 to-pink-500 rounded-full p-8 group-hover:scale-110 transition-all duration-300 shadow-xl\">\n                      <PlayCircle className=\"w-20 h-20 text-white\" />\n                    </div>\n                  </button>\n                  <div className=\"mt-6 space-y-2\">\n                    <p className=\"text-slate-600 font-bold text-2xl\">Try Interactive Training</p>\n                    <p className=\"text-slate-500\">Click the play button to experience the learning module</p>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Related Projects */}\n        <div className=\"border-t border-slate-200 pt-12\">\n          <h2 className=\"text-2xl font-bold text-brand-slate mb-8 text-center\">More Projects</h2>\n          <div className=\"text-center\">\n            <Link href=\"/portfolio\">\n              <Button \n                variant=\"outline\"\n                className=\"border-brand-purple text-brand-purple hover:bg-brand-purple hover:text-white\"\n                data-testid=\"view-more-projects\"\n              >\n                View All Projects\n                <ArrowLeft className=\"ml-2 h-4 w-4 rotate-180\" />\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12430},"client/src/pages/resume.tsx":{"content":"import * as React from \"react\";\nimport { Download, Mail, Phone, MapPin, Globe } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Resume() {\n  return (\n    <div className=\"py-20 bg-gradient-to-br from-indigo-900 via-purple-600 via-pink-500 to-amber-400 min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"py-20 relative\">\n        <div className=\"max-w-4xl mx-auto px-6 lg:px-8 text-center\">\n          <h1 className=\"text-4xl lg:text-5xl font-bold text-white mb-6 drop-shadow-lg\">\n            Resume\n          </h1>\n          <p className=\"text-xl text-white/90 leading-relaxed mb-8\">\n            Experienced Instructional Designer & Learning Experience Designer\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <a href=\"/Kazeem_Salau_Resume.pdf\" download>\n              <Button\n                className=\"bg-white/20 backdrop-blur-md border-white/30 text-white hover:bg-white/30 transition-all duration-300\"\n                data-testid=\"download-resume\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Download PDF\n              </Button>\n            </a>\n          </div>\n        </div>\n      </section>\n\n      {/* Resume Content */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-6 lg:px-8\">\n          {/* Contact Information */}\n          <div className=\"mb-12 p-8 bg-gray-50 rounded-2xl\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-6 text-center\">Kazeem Salau</h2>\n            <div className=\"grid md:grid-cols-2 gap-4 text-gray-600\">\n              <div className=\"flex items-center gap-3\">\n                <Mail className=\"w-5 h-5 text-purple-600\" />\n                <span>kazeem.salau@email.com</span>\n              </div>\n              <div className=\"flex ITEMS-center gap-3\">\n                <Phone className=\"w-5 h-5 text-purple-600\" />\n                <span>+1 (555) 123-4567</span>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <MapPin className=\"w-5 h-5 text-purple-600\" />\n                <span>San Francisco, CA</span>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <Globe className=\"w-5 h-5 text-purple-600\" />\n                <span>kzeemsalau.com</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Professional Summary */}\n          <div className=\"mb-12\">\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-6 border-b-2 border-purple-200 pb-2\">\n              Professional Summary\n            </h3>\n            <p className=\"text-gray-700 leading-relaxed text-lg\">\n              Results孝2Results-driven Instructional Designer with 8+ years of experience creating engaging,\n              learner-centered educational experiences. Expert in applying learning science principles,\n              design thinking methodologies, and cutting-edge educational technologies to deliver\n              measurable learning outcomes. Proven track record of improving learner engagement by\n              40% and knowledge retention by 35% through innovative design approaches.\n            </p>\n          </div>\n\n          {/* Core Competencies */}\n          <div className=\"mb-12\">\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-6 border-b-2 border-purple-200 pb-2\">\n              Core Competencies\n            </h3>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <div>\n                <h4 className=\"font-semibold text-gray-800 mb-3\">Design & Development</h4>\n                <ul className=\"space-y-2 text-gray-600\">\n                  <li>• Instructional Design (ADDIE, SAM)</li>\n                  <li>• Learning Experience Design</li>\n                  <li>• Curriculum Development</li>\n                  <li>• Assessment Design</li>\n                </ul>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-gray-800 mb-3\">Technology & Tools</h4>\n                <ul className=\"space-y-2 text-gray-600\">\n                  <li>• Articulate Storyline 360</li>\n                  <li>• Adobe Creative Suite</li>\n                  <li>• LMS Administration</li>\n                  <li>• xAPI/SCORM</li>\n                </ul>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-gray-800 mb-3\">Research & Analysis</h4>\n                <ul className=\"space-y-2 text-gray-600\">\n                  <li>• Learning Analytics</li>\n                  <li>• User Experience Research</li>\n                  <li>• Performance Analysis</li>\n                  <li>• Needs Assessment</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          {/* Professional Experience */}\n          <div className=\"mb-12\">\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-6 border-b-2 border-purple-200 pb-2\">\n              Professional Experience\n            </h3>\n            <div className=\"space-y-8\">\n              {/* Job 1 */}\n              <div className=\"border-l-4 border-purple-200 pl-6\">\n                <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-3\">\n                  <h4 className=\"text-xl font-semibold text-gray-900\">Senior Learning Experience Designer</h4>\n                  <span className=\"text-gray-500 font-medium\">2021 - Present</span>\n                </div>\n                <p className=\"text-purple-600 font-medium mb-3\">TechCorp Solutions | San Francisco, CA</p>\n                <ul className=\"space-y-2 text-gray-700\">\n                  <li>• Lead design and development of enterprise-wide learning programs serving 5,000+ employees</li>\n                  <li>• Implemented microlearning strategy resulting in 40% increase in course completion rates</li>\n                  <li>• Collaborated with cross-functional teams to align learning objectives with business goals</li>\n                  <li>• Mentored junior designers and established design standards and best practices</li>\n                </ul>\n              </div>\n\n              {/* Job 2 */}\n              <div className=\"border-l-4 border-purple-200 pl-6\">\n                <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-3\">\n                  <h4 className=\"text-xl font-semibold text-gray-900\">Instructional Designer</h4>\n                  <span className=\"text-gray-500 font-medium\">2019 - 2021</span>\n                </div>\n                <p className=\"text-purple-600 font-medium mb-3\">EduTech Innovations | Remote</p>\n                <ul className=\"space-y-2 text-gray-700\">\n                  <li>• Designed and developed 50+ interactive e-learning modules using Articulate Storyline</li>\n                  <li>• Conducted learner analysis and usability testing to optimize learning experiences</li>\n                  <li>• Improved learner satisfaction scores by 35% through user-centered design approaches</li>\n                  <li>• Created comprehensive style guides and design documentation</li>\n                </ul>\n              </div>\n\n              {/* Job 3 */}\n              <div className=\"border-l-4 border-purple-200 pl-6\">\n                <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-3\">\n                  <h4 className=\"text-xl font-semibold text-gray-900\">Learning Specialist</h4>\n                  <span className=\"text-gray-500 font-medium\">2017 - 2019</span>\n                </div>\n                <p className=\"text-purple-600 font-medium mb-3\">Global Learning Institute | New York, NY</p>\n                <ul className=\"space-y-2 text-gray-700\">\n                  <li>• Developed curriculum for professional development programs in healthcare sector</li>\n                  <li>• Facilitated training sessions for 200+ healthcare professionals annually</li>\n                  <li>• Implemented learning analytics to track and improve program effectiveness</li>\n                  <li>• Collaborated with subject matter experts to ensure content accuracy and relevance</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          {/* Education */}\n          <div className=\"mb-12\">\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-6 border-b-2 border-purple-200 pb-2\">\n              Education\n            </h3>\n            <div className=\"space-y-6\">\n              <div className=\"border-l-4 border-purple-200 pl-6\">\n                <h4 className=\"text-xl font-semibold text-gray-900\">Master of Education (M.Ed.)</h4>\n                <p className=\"text-purple-600 font-medium\">Instructional Technology | Stanford University</p>\n                <p className=\"text-gray-500\">2017 | Magna Cum Laude</p>\n              </div>\n              <div className=\"border-l-4 border-purple-200 pl-6\">\n                <h4 className=\"text-xl font-semibold text-gray-900\">Bachelor of Science (B.S.)</h4>\n                <p className=\"text-purple-600 font-medium\">Educational Psychology | UC Berkeley</p>\n                <p className=\"text-gray-500\">2015 | Summa Cum Laude</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Certifications */}\n          <div className=\"mb-12\">\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-6 border-b-2 border-purple-200 pb-2\">\n              Certifications & Awards\n            </h3>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"font-semibold text-gray-800 mb-3\">Professional Certifications</h4>\n                <ul className=\"space-y-2 text-gray-600\">\n                  <li>• Certified Professional in Learning and Performance (CPLP)</li>\n                  <li>• Google UX Design Certificate</li>\n                  <li>• Articulate Storyline 360 Expert</li>\n                  <li>• Adobe Certified Expert (ACE)</li>\n                </ul>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-gray-800 mb-3\">Awards & Recognition</h4>\n                <ul className=\"space-y-2 text-gray-600\">\n                  <li>• Learning Innovation Award 2023</li>\n                  <li>• Best E-Learning Course Design 2022</li>\n                  <li>• Outstanding Graduate Student Award 2017</li>\n                  <li>• Dean's List (2013-2015)</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          {/* Key Projects */}\n          <div className=\"mb-12\">\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-6 border-b-2 border-purple-200 pb-2\">\n              Key Projects\n            </h3>\n            <div className=\"space-y-6\">\n              <div className=\"bg-gray-50 p-6 rounded-lg\">\n                <h4 className=\"text-lg font-semibold text-gray-900 mb-2\">Enterprise Onboarding Transformation</h4>\n                <p className=\"text-gray-700 mb-3\">\n                  Complete redesign of company-wide onboarding program using design thinking methodology.\n                  Reduced time-to-productivity by 45% and increased new hire satisfaction by 60%.\n                </p>\n                <div className=\"flex flex-wrap gap-2\">\n                  <span className=\"px-3 py-1 bg-purple-100 text-purple-700 text-sm rounded-full\">Design Thinking</span>\n                  <span className=\"px-3 py-1 bg-purple-100 text-purple-700 text-sm rounded-full\">Microlearning</span>\n                  <span className=\"px-3 py-1 bg-purple-100 text-purple-700 text-sm rounded-full\">Analytics</span>\n                </div>\n              </div>\n\n              <div className=\"bg-gray-50 p-6 rounded-lg\">\n                <h4 className=\"text-lg font-semibold text-gray-900 mb-2\">AI-Enhanced Learning Platform</h4>\n                <p className=\"text-gray-700 mb-3\">\n                  Pioneered integration of AI-powered personalization features in corporate LMS,\n                  resulting in 50% improvement in learning path completion and 30% increase in knowledge retention.\n                </p>\n                <div className=\"flex flex-wrap gap-2\">\n                  <span className=\"px-3 py-1 bg-purple-100 text-purple-700 text-sm rounded-full\">AI Integration</span>\n                  <span className=\"px-3 py-1 bg-purple-100 text-purple-700 text-sm rounded-full\">Personalization</span>\n                  <span className=\"px-3 py-1 bg-purple-100 text-purple-700 text-sm rounded-full\">LMS</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":12718},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1853},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}